(; This file was automatically generated from Matita. ;)

def isnilb :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A))
              (_l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
               matita_basics_bool.bool))).

def isnilb_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A))
              (_l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
               matita_basics_bool.bool))).

[ A, _l ] isnilb A _l -->
  matita_basics_lists_list.filter_list (cic.type cic.z) A
    (_l :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.bool)
    (matita_basics_lists_listb.isnilb_body
       (cic.lift (cic.type cic.z) (cic.type cic.z) A))
    _l.

[ A, _l ] isnilb_body A _l -->
  matita_basics_lists_list.match_list (cic.type cic.z)
    (cic.lift (cic.type cic.z) (cic.type cic.z) A)
    (__ :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.bool)
    matita_basics_bool.true
    (hd : cic.Term (cic.type cic.z) A =>
     tl :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.false)
    _l.

def memb :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (D :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) D)
              (__ :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) D) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) D))) =>
                  matita_basics_bool.bool)))).

def memb_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (D :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) D)
              (__ :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) D) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) D))) =>
                  matita_basics_bool.bool)))).

[ D, __, __1 ] memb D __ __1 -->
  matita_basics_lists_list.filter_list (cic.type cic.z)
    ((_xxx :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.carr _xxx) D)
    (__1 :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     matita_basics_bool.bool)
    (matita_basics_lists_listb.memb_body D __) __1.

[ D, __, __1 ] memb_body D __ __1 -->
  matita_basics_lists_list.match_list (cic.type cic.z)
    (cic.lift (cic.type cic.z) (cic.type cic.z)
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) D))
    (__2 :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     matita_basics_bool.bool)
    matita_basics_bool.false
    (a :
       cic.Term (cic.type cic.z)
         ((_xxx :
             cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
           matita_basics_deqsets.carr _xxx) D) =>
     tl :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     matita_basics_bool.orb (matita_basics_deqsets.eqb D __ a)
       (matita_basics_lists_listb.memb D __ tl))
    __1.

def memb_hd :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a l))
                    matita_basics_bool.true))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_logic.eq_ind_r
        (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
           matita_basics_bool.bool)
        matita_basics_bool.true
        (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                x matita_basics_bool.true) =>
         cic.lift cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_listb.memb S a l) x)
              matita_basics_bool.true))
        (matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_bool.match_bool (cic.type cic.z)
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               matita_basics_bool.bool)
              matita_basics_bool.true (matita_basics_lists_listb.memb S a l)
              matita_basics_bool.true))
        (matita_basics_deqsets.eqb S a a)
        (matita_basics_logic.proj2
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb S a a) matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a a)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a a))
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a a)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a a) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb S a a) matita_basics_bool.true))
           (matita_basics_deqsets.eqb_true S a a)
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a)).

def memb_cons :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (b :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a l)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b l))
                          matita_basics_bool.true))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      b :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l) matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a l)
                   matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_listb.memb S a l) __)
              matita_basics_bool.true))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l)
                matita_basics_bool.true) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true)
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_basics_lists_listb.memb S a l) auto)
        (matita_basics_deqsets.eqb S a b).

def memb_single :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             x
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))))
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_lists_list.cons
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  x
                                  (matita_basics_lists_list.nil
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))))
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a x)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      x :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a x) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a x) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a x) matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a x) matita_basics_bool.false)) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false
                 (matita_basics_deqsets.eqb S a x))
              matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_bool.match_bool (cic.type cic.z)
                      (_0 :
                         cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                       matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.false
                      (matita_basics_deqsets.eqb S a x))
                   matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __2)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a x))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a x) matita_basics_bool.true) =>
         __ :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_bool.match_bool (cic.type cic.z)
                   (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                    matita_basics_bool.bool)
                   matita_basics_bool.true matita_basics_bool.false
                   (matita_basics_deqsets.eqb S a x))
                matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S))
           x
           (x0 :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S) =>
            _0 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   x0 x) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 x0 x))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              x)
           a
           (matita_basics_logic.proj1
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a x) matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a x)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a x))
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a x)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         a x) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a x) matita_basics_bool.true))
              (matita_basics_deqsets.eqb_true S a x) H))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a x) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   x0 matita_basics_bool.false) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false x0)
                    matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             matita_basics_bool.bool)
                            matita_basics_bool.true matita_basics_bool.false
                            x0)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a x)))
           (abs :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.true) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a x))
              (matita_basics_logic.absurd
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true x0))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    matita_basics_bool.false abs)
                 matita_basics_bool.not_eq_true_false))
           (matita_basics_deqsets.eqb S a x) H)
        (matita_basics_bool.true_or_false (matita_basics_deqsets.eqb S a x)).

def memb_append :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1 l2))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_list.append
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     l1 l2))
                               matita_basics_bool.true) =>
                        (_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.Or _A _B)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S a l1)
                             matita_basics_bool.true)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S a l2)
                             matita_basics_bool.true)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          _x_716 l2))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a
                            (matita_basics_lists_list.append
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               _x_716 l2))
                         matita_basics_bool.true) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a _x_716)
                       matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l2)
                       matita_basics_bool.true)))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l2)
                matita_basics_bool.true) =>
         matita_basics_logic.or_intror
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l2) matita_basics_bool.true)
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S a l2) H))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            tl l2))
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb S a
                              (matita_basics_lists_list.append
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S))
                                 tl l2))
                           matita_basics_bool.true) =>
                    (_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a tl)
                         matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.true)))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          tl l2))
                    __)
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_basics_bool.bool)
                         matita_basics_bool.true
                         (matita_basics_lists_listb.memb S a
                            (matita_basics_lists_list.append
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               tl l2))
                         __)
                      matita_basics_bool.true) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a tl) __)
                    matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true)))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   matita_basics_bool.true matita_basics_bool.true) =>
            matita_basics_logic.or_introl
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.true)
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a l2)
                 matita_basics_bool.true)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_list.append
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         tl l2))
                   matita_basics_bool.true) =>
            Hind l2
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       tl l2))
                 auto))
           (matita_basics_deqsets.eqb S a b))
        l1.

def memb_append_l1 :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l1)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a l1)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1 l2))
                          matita_basics_bool.true))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a _x_716)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a _x_716)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          _x_716 l2))
                    matita_basics_bool.true))))
        (le :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         abs :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a le)
                 matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a tl)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb S a tl)
                           matita_basics_bool.true) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            tl l2))
                      matita_basics_bool.true))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl) __)
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_basics_bool.bool)
                         matita_basics_bool.true
                         (matita_basics_lists_listb.memb S a tl) __)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          tl l2))
                    __)
                 matita_basics_bool.true))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   matita_basics_bool.true matita_basics_bool.true) =>
            matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true) =>
            Hind l2
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.memb S a tl) auto))
           (matita_basics_deqsets.eqb S a b))
        l1.

def memb_append_l2 :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l2)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a l2)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1 l2))
                          matita_basics_bool.true))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          _x_716 l2))
                    matita_basics_bool.true))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l2)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_basics_lists_listb.memb S a l2) auto)
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb S a l2)
                           matita_basics_bool.true) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            tl l2))
                      matita_basics_bool.true))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a l2)
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          tl l2))
                    __)
                 matita_basics_bool.true))
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a l2)
                   matita_basics_bool.true) =>
            matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (auto :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a l2)
                   matita_basics_bool.true) =>
            Hind l2
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.memb S a l2) auto))
           (matita_basics_deqsets.eqb S a b))
        l1.

def memb_exists :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a l)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__1 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (l1 :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type cic.z) =>
                            _P :
                              cic.Term (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                   (__1 : cic.Term (cic.type cic.z) A =>
                                    cic.univ cic.prop)) =>
                            matita_basics_logic.ex
                              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                              _P)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (l2 :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))) =>
                              cic.lift cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   l
                                   (matita_basics_lists_list.append
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      l1
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         a l2)))))))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a _x_716)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__1 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (l2 :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             _x_716
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a l2)))))))))
        (abs :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__ : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (l2 :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a l2))))))))
           (matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S a tl)
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__1 : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))))
                   (l1 :
                      cic.Term (cic.type cic.z)
                        ((_A : cic.Univ (cic.type cic.z) =>
                          matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                           (cic.lift (cic.type cic.z) (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S))) =>
                    cic.lift cic.prop cic.prop
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__1 : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         (l2 :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S))) =>
                          cic.lift cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))))
                               tl
                               (matita_basics_lists_list.append
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  l1
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     a l2)))))))) =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      b tl))
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a tl) matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a tl)
                      matita_basics_bool.true)) =>
            (A : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A
                    (__1 : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__1 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             b tl)
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l1
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                a l2)))))))
           (eqba :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
            matita_basics_logic.ex_intro
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__ : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             b tl)
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l1
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                a l2))))))
              (matita_basics_lists_list.nil
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (matita_basics_logic.ex_intro
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b tl)
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (matita_basics_lists_list.nil
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a l2))))
                 tl
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S) =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            x b) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             b tl)
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x tl))))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b tl))
                    a
                    (matita_basics_logic.proj1
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb S a b)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b))
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  a b) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true))
                       (matita_basics_deqsets.eqb_true S a b) eqba))))
           (mem_tl :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true) =>
            matita_basics_logic.match_ex cic.prop
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr S))))
              (l1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_deqsets.carr S))) =>
               cic.lift cic.prop cic.prop
                 (matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S))))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S))) =>
                     cic.lift cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             (matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S))))
                          tl
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S))
                             l1
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S))
                                a l2))))))
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))))
                      (l1 :
                         cic.Term (cic.type cic.z)
                           ((_A : cic.Univ (cic.type cic.z) =>
                             matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S))) =>
                       cic.lift cic.prop cic.prop
                         ((A : cic.Univ (cic.type cic.z) =>
                           _P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                  (__ : cic.Term (cic.type cic.z) A =>
                                   cic.univ cic.prop)) =>
                           matita_basics_logic.ex
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                             _P)
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))))
                            (l2 :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S))) =>
                             cic.lift cic.prop cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))))
                                  tl
                                  (matita_basics_lists_list.append
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     l1
                                     (matita_basics_lists_list.cons
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        a l2))))))) =>
               (A : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A
                       (__1 : cic.Term (cic.type cic.z) A =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A
                             (__1 : cic.Term (cic.type cic.z) A =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (l2 :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b tl)
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l1
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a l2)))))))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               _clearme :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))))
                      (l2 :
                         cic.Term (cic.type cic.z)
                           ((_A : cic.Univ (cic.type cic.z) =>
                             matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S))) =>
                       cic.lift cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))))
                            tl
                            (matita_basics_lists_list.append
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               l1
                               (matita_basics_lists_list.cons
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  a l2))))) =>
               matita_basics_logic.match_ex cic.prop
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       tl
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          l1
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a l2))))
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__ : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         (l2 :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S))) =>
                          cic.lift cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))))
                               tl
                               (matita_basics_lists_list.append
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  l1
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     a l2))))) =>
                  (A : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A
                          (__1 : cic.Term (cic.type cic.z) A =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    (l10 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type cic.z) =>
                         _P :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__1 : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_logic.ex
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (l2 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   b tl)
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l10
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      a l2)))))))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  eqtl :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         tl
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            l1
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a l2))) =>
                  matita_basics_logic.ex_intro
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    (l10 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type cic.z) =>
                         _P :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A
                                (__ : cic.Term (cic.type cic.z) A =>
                                 cic.univ cic.prop)) =>
                         matita_basics_logic.ex
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (l20 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   b tl)
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l10
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      a l20))))))
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       b l1)
                    (matita_basics_logic.ex_intro
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))))
                       (l20 :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b tl)
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   b l1)
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a l20))))
                       l2
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (matita_basics_lists_list.append
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l1
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                a l2))
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))))
                                  x
                                  (matita_basics_lists_list.append
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     l1
                                     (matita_basics_lists_list.cons
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        a l2))) =>
                           cic.lift cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   b x)
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      b l1)
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      a l2))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l1
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      a l2))))
                          tl eqtl)))
                 _clearme)
              (Hind mem_tl))
           (matita_basics_bool.orb_true_l (matita_basics_deqsets.eqb S a b)
              (matita_basics_lists_listb.memb S a tl) H))
        l.

def not_memb_to_not_eq :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (b :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l)
                          matita_basics_bool.false)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a l)
                               matita_basics_bool.false) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S b l)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb S b l)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.false)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      b :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l) matita_basics_bool.false)
           (__1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a l)
                   matita_basics_bool.false) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S b l)
                 matita_basics_bool.true)
              (__2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __2)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S b l)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __3)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)))
        (eqab :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S))
           b
           (x :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S) =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   x b) =>
            cic.lift cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S x l)
                    matita_basics_bool.false)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S x l)
                         matita_basics_bool.false) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S b l)
                       matita_basics_bool.true)
                    (__2 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __2 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __2)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S b l)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __3 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __3)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S x b)
                       matita_basics_bool.false))))
           (H :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S b l)
                   matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S b b)
                       matita_basics_bool.false)))
              (abs :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S b b)
                       matita_basics_bool.false))
                 (matita_basics_logic.absurd
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true matita_basics_bool.false)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       matita_basics_bool.false abs)
                    matita_basics_bool.not_eq_true_false))
              (matita_basics_lists_listb.memb S b l) H)
           a
           (matita_basics_logic.proj1
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a b))
              (cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a b)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         a b) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b) matita_basics_bool.true))
              (matita_basics_deqsets.eqb_true S a b) eqab))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l)
                matita_basics_bool.false) =>
         auto'' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S b l)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.false))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false)
           (matita_basics_deqsets.eqb S a b) auto)
        (matita_basics_bool.true_or_false (matita_basics_deqsets.eqb S a b)).

def memb_map :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S1 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (S2 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S1)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1) =>
                     (_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S2))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S1) =>
                          (_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S2)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S1)
                    (a :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S1)))
                       (l :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S1))) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S1 a l)
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb S1 a l)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S2 (f a)
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S1))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S2))
                                   f l))
                             matita_basics_bool.true)))))))
      :=
      S1 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      S2 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S1)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S1) =>
              (_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S2)) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S1) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S1))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S1))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S1))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S1 a _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S1 a _x_716)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S2 (f a)
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S1))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S2))
                       f _x_716))
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S1) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S1))) =>
         memba :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S1 a tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S1 a tl)
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S2 (f a)
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S1))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S2))
                         f tl))
                   matita_basics_bool.true)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S1 a x) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S1 a x) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S1 a x)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S1 a x)
                      matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S1 a tl)
                    (matita_basics_deqsets.eqb S1 a x))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_basics_bool.bool)
                         matita_basics_bool.true
                         (matita_basics_lists_listb.memb S1 a tl)
                         (matita_basics_deqsets.eqb S1 a x))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S2 (f a)
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S1))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S2))
                          f tl))
                    (matita_basics_deqsets.eqb S2 (f a) (f x)))
                 matita_basics_bool.true))
           (eqx :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S1 a x) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x0 matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S1 a tl) x0)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S1 a tl) x0)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S2 (f a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S1))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S2))
                                f tl))
                          (matita_basics_deqsets.eqb S2 (f a) (f x)))
                       matita_basics_bool.true)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S1))
                 x
                 (x0 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S1) =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S1))
                         x0 x) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S1 x0 tl)
                             matita_basics_bool.true)
                          matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  (matita_basics_lists_listb.memb S1 x0 tl)
                                  matita_basics_bool.true)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S2 (f x0)
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S1))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S2))
                                   f tl))
                             (matita_basics_deqsets.eqb S2 (f x0) (f x)))
                          matita_basics_bool.true)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x0 matita_basics_bool.true) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S1 x tl)
                                matita_basics_bool.true)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     (matita_basics_lists_listb.memb S1 x tl)
                                     matita_basics_bool.true)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S2 (f x)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            S1))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx)
                                            S2))
                                      f tl))
                                x0)
                             matita_basics_bool.true)))
                    (auto :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            matita_basics_bool.true matita_basics_bool.true) =>
                     matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_deqsets.eqb S2 (f x) (f x))
                    (matita_basics_logic.proj2
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S2 (f x) (f x))
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb S2 (f x) (f x))
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S2))
                             (f x) (f x)))
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S2))
                             (f x) (f x))
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S2))
                                  (f x) (f x)) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S2 (f x) (f x))
                             matita_basics_bool.true))
                       (matita_basics_deqsets.eqb_true S2 (f x) (f x))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S2))
                          (f x))))
                 a
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S1 a x)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S1 a x)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S1))
                          a x))
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S1))
                          a x)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S1))
                               a x) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S1 a x)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true S1 a x) eqx))
              (matita_basics_deqsets.eqb S1 a x) eqx)
           (eqx :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S1 a x)
                   matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x0 matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S1 a tl) x0)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S1 a tl) x0)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S2 (f a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S1))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S2))
                                f tl))
                          (matita_basics_deqsets.eqb S2 (f a) (f x)))
                       matita_basics_bool.true)))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S1 a tl)
                          matita_basics_bool.false)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S1 a tl)
                               matita_basics_bool.false)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S2 (f a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S1))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S2))
                                f tl))
                          __)
                       matita_basics_bool.true))
                 (auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S1 a tl)
                         matita_basics_bool.true) =>
                  matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S1 a tl)
                         matita_basics_bool.true) =>
                  memba
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x0 matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb S1 a tl) auto))
                 (matita_basics_deqsets.eqb S2 (f a) (f x)))
              (matita_basics_deqsets.eqb S1 a x) eqx)
           (matita_basics_bool.true_or_false
              (matita_basics_deqsets.eqb S1 a x)))
        l.

def memb_compose :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S1 :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (S2 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type (cic.s cic.z)) cic.prop
                 matita_basics_deqsets.DeqSet
                 (S3 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  cic.prod (cic.type cic.z) cic.prop
                    (cic.prod (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S1)
                       (__ :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S1) =>
                        cic.prod (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S2)
                          (__1 :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S2) =>
                           (_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S3)))
                    (op :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S1)
                            (__ :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S1) =>
                             cic.prod (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S2)
                               (__1 :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S2) =>
                                (_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S3))) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S1)
                       (a1 :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S1) =>
                        cic.prod (cic.type cic.z) cic.prop
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S2)
                          (a2 :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S2) =>
                           cic.prod (cic.type cic.z) cic.prop
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S1)))
                             (l1 :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S1))) =>
                              cic.prod (cic.type cic.z) cic.prop
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S2)))
                                (l2 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S2))) =>
                                 cic.prod cic.prop cic.prop
                                   ((A :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb S1 a1
                                         l1)
                                      matita_basics_bool.true)
                                   (__ :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_lists_listb.memb S1
                                              a1 l1)
                                           matita_basics_bool.true) =>
                                    cic.prod cic.prop cic.prop
                                      ((A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb S2
                                            a2 l2)
                                         matita_basics_bool.true)
                                      (__1 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __1 :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __1)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (matita_basics_lists_listb.memb
                                                 S2 a2 l2)
                                              matita_basics_bool.true) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __2 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __2)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb S3
                                            (op a1 a2)
                                            (matita_basics_lists_list.compose
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S1))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S2))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S3))
                                               op l1 l2))
                                         matita_basics_bool.true)))))))))))
      :=
      S1 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      S2 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      S3 : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      op :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S1)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S1) =>
              cic.prod (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S2)
                (__1 :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) S2) =>
                 (_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S3))) =>
      a1 :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S1) =>
      a2 :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S2) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S1))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S1))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S1))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S2)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S2))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S1 a1 _x_716)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S1 a1 _x_716)
                         matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S2 a2 l2)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S2 a2 l2)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S3 (op a1 a2)
                          (matita_basics_lists_list.compose
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S1))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S2))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S3))
                             op _x_716 l2))
                       matita_basics_bool.true)))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S2))) =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S2 a2 l2)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S1) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S1))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S2)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S2))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S1 a1 tl)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb S1 a1 tl)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S2 a2 l2)
                         matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (matita_basics_lists_listb.memb S2 a2 l2)
                              matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __2)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S3 (op a1 a2)
                            (matita_basics_lists_list.compose
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S1))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S2))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S3))
                               op tl l2))
                         matita_basics_bool.true)))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S2))) =>
         memba1 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S1 a1
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1))
                      x tl))
                matita_basics_bool.true) =>
         memba2 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S2 a2 l2)
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S1 a1 x) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S1 a1 tl)
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S1 a1 x)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S1 a1 tl)
                      matita_basics_bool.true)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S3 (op a1 a2)
                 (matita_basics_lists_list.compose
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S1))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S2))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S3))
                    op
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S1))
                       x tl)
                    l2))
              matita_basics_bool.true)
           (eqa1 :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S1 a1 x)
                   matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S1))
              x
              (x0 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S1) =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1))
                      x0 x) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S3 (op x0 a2)
                       (matita_basics_lists_list.compose
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S1))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S2))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S3))
                          op
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S1))
                             x tl)
                          l2))
                    matita_basics_bool.true))
              (matita_basics_lists_listb.memb_append_l1 S3 (op x a2)
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S2))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S3))
                    (op x) l2)
                 (matita_basics_lists_list.foldr
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S1))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S3))))
                    (i :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S1) =>
                     acc :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S3))) =>
                     matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S3))
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S2))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S3))
                          (op i) l2)
                       acc)
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S3)))
                    tl)
                 (matita_basics_lists_listb.memb_map S2 S3 (op x) a2 l2
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x0 matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb S2 a2 l2) memba2)))
              a1
              (matita_basics_logic.proj1
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S1 a1 x)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S1 a1 x)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S1))
                       a1 x))
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S1))
                       a1 x)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S1))
                            a1 x) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S1 a1 x)
                       matita_basics_bool.true))
                 (matita_basics_deqsets.eqb_true S1 a1 x) eqa1))
           (membtl :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S1 a1 tl)
                   matita_basics_bool.true) =>
            matita_basics_lists_listb.memb_append_l2 S3 (op a1 a2)
              (matita_basics_lists_list.map
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S2))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S3))
                 (op x) l2)
              (matita_basics_lists_list.foldr
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S1))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S3))))
                 (i :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S1) =>
                  acc :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S3))) =>
                  matita_basics_lists_list.append
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S3))
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S2))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S3))
                       (op i) l2)
                    acc)
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S3)))
                 tl)
              (Hind l2
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x0 matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_lists_listb.memb S1 a1 tl) membtl)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x0 matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_lists_listb.memb S2 a2 l2) memba2)))
           (matita_basics_bool.orb_true_l (matita_basics_deqsets.eqb S1 a1 x)
              (matita_basics_lists_listb.memb S1 a1 tl) memba1))
        l1.

def memb_reverse :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a l)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_list.reverse
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l))
                       matita_basics_bool.true)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a _x_716)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.reverse
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       _x_716))
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S a tl)
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_list.reverse
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         tl))
                   matita_basics_bool.true)) =>
         memba :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      b tl))
                matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))))
           (matita_basics_lists_list.append
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              (matita_basics_lists_list.reverse
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 tl)
              (matita_basics_lists_list.reverse
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))))
           (x :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))) =>
            __ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))))
                   x
                   (matita_basics_lists_list.append
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      (matita_basics_lists_list.reverse
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         tl)
                      (matita_basics_lists_list.reverse
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         (matita_basics_lists_list.cons
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            b
                            (matita_basics_lists_list.nil
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))))) =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a x)
                 matita_basics_bool.true))
           (matita_basics_logic.match_Or cic.prop
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a tl)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a tl)
                         matita_basics_bool.true)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       (matita_basics_lists_list.reverse
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          tl)
                       (matita_basics_lists_list.reverse
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             b
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))))))
                 matita_basics_bool.true)
              (Hcase :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.true) =>
               matita_basics_lists_listb.memb_append_l2 S a
                 (matita_basics_lists_list.reverse
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    tl)
                 (matita_basics_lists_list.reverse
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       b
                       (matita_basics_lists_list.nil
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S) =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            x b) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S x
                             (matita_basics_lists_list.reverse
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   b
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))))
                          matita_basics_bool.true))
                    (matita_basics_lists_listb.memb_hd S b
                       (matita_basics_lists_list.nil
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    a
                    (matita_basics_logic.proj1
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb S a b)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b))
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b)
                          (__ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  a b) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true))
                       (matita_basics_deqsets.eqb_true S a b) Hcase)))
              (Hcase :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a tl)
                      matita_basics_bool.true) =>
               matita_basics_lists_listb.memb_append_l1 S a
                 (matita_basics_lists_list.reverse
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    tl)
                 (matita_basics_lists_list.reverse
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       b
                       (matita_basics_lists_list.nil
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))))
                 (Hind
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb S a tl) Hcase)))
              (matita_basics_bool.orb_true_l
                 (matita_basics_deqsets.eqb S a b)
                 (matita_basics_lists_listb.memb S a tl) memba))
           (matita_basics_lists_list.reverse
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              (matita_basics_lists_list.append
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b
                    (matita_basics_lists_list.nil
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 tl))
           (matita_basics_lists_list.reverse_append
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 b
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))))
              tl))
        l.

def mem_to_memb :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod cic.prop cic.prop
                    ((H : cic.Univ (cic.type cic.z) =>
                      __ : cic.Term (cic.type cic.z) H =>
                      __1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                      matita_basics_lists_list.mem
                        (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a l)
                    (__ :
                       cic.Term cic.prop
                         ((H : cic.Univ (cic.type cic.z) =>
                           __ : cic.Term (cic.type cic.z) H =>
                           __1 :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     H)) =>
                           matita_basics_lists_list.mem
                             (cic.lift (cic.type cic.z) (cic.type cic.z) H)
                             __ __1)
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a l) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l)
                       matita_basics_bool.true)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((H : cic.Univ (cic.type cic.z) =>
                __ : cic.Term (cic.type cic.z) H =>
                __1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                matita_basics_lists_list.mem
                  (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a _x_716)
              (__ :
                 cic.Term cic.prop
                   ((H : cic.Univ (cic.type cic.z) =>
                     __ : cic.Term (cic.type cic.z) H =>
                     __1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                     matita_basics_lists_list.mem
                       (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a _x_716) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a _x_716)
                 matita_basics_bool.true)))
        (matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false matita_basics_bool.true)))
        (hd :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((H : cic.Univ (cic.type cic.z) =>
                  __ : cic.Term (cic.type cic.z) H =>
                  __1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                  matita_basics_lists_list.mem
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a tl)
                (__ :
                   cic.Term cic.prop
                     ((H : cic.Univ (cic.type cic.z) =>
                       __ : cic.Term (cic.type cic.z) H =>
                       __1 :
                         cic.Term (cic.type cic.z)
                           (matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                       matita_basics_lists_list.mem
                         (cic.lift (cic.type cic.z) (cic.type cic.z) H) __
                         __1)
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))
                        a tl) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true)) =>
         _clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a hd)
                ((H : cic.Univ (cic.type cic.z) =>
                  __ : cic.Term (cic.type cic.z) H =>
                  __1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                  matita_basics_lists_list.mem
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a tl)) =>
         matita_basics_logic.match_Or cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a hd)
           ((H : cic.Univ (cic.type cic.z) =>
             __ : cic.Term (cic.type cic.z) H =>
             __1 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
             matita_basics_lists_list.mem
               (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a tl)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a hd)
                   ((H : cic.Univ (cic.type cic.z) =>
                     __ : cic.Term (cic.type cic.z) H =>
                     __1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                     matita_basics_lists_list.mem
                       (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a tl)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.match_bool (cic.type cic.z)
                 (_0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  matita_basics_bool.bool)
                 matita_basics_bool.true
                 (matita_basics_lists_listb.memb S a tl)
                 (matita_basics_deqsets.eqb S a hd))
              matita_basics_bool.true)
           (eqa :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a hd) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a tl) x)
                    matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl)
                    matita_basics_bool.true))
              (matita_basics_deqsets.eqb S a hd)
              (matita_basics_logic.proj2
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S a hd)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S a hd)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a hd))
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a hd)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a hd) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S a hd)
                       matita_basics_bool.true))
                 (matita_basics_deqsets.eqb_true S a hd) eqa))
           (Hmem :
              cic.Term cic.prop
                ((H : cic.Univ (cic.type cic.z) =>
                  __ : cic.Term (cic.type cic.z) H =>
                  __1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                  matita_basics_lists_list.mem
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a tl) =>
            matita_basics_bool.match_bool cic.prop
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl) __)
                 matita_basics_bool.true)
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl)
                    matita_basics_bool.true))
              (Hind Hmem) (matita_basics_deqsets.eqb S a hd))
           _clearme)
        l.

def memb_to_mem :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (a :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a l)
                            matita_basics_bool.true) =>
                     (H : cic.Univ (cic.type cic.z) =>
                      __1 : cic.Term (cic.type cic.z) H =>
                      __2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                      matita_basics_lists_list.mem
                        (cic.lift (cic.type cic.z) (cic.type cic.z) H) __1
                        __2)
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a l)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a _x_716)
                      matita_basics_bool.true) =>
               (H : cic.Univ (cic.type cic.z) =>
                __1 : cic.Term (cic.type cic.z) H =>
                __2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                matita_basics_lists_list.mem
                  (cic.lift (cic.type cic.z) (cic.type cic.z) H) __1 __2)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a _x_716)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_bool.bool_discr matita_basics_bool.false
           matita_basics_bool.true H
           (cic.lift cic.prop (cic.type (cic.s cic.z))
              matita_basics_logic.False))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S a tl)
                        matita_basics_bool.true) =>
                 (H : cic.Univ (cic.type cic.z) =>
                  __1 : cic.Term (cic.type cic.z) H =>
                  __2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                  matita_basics_lists_list.mem
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H) __1 __2)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a tl)) =>
         mema :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      b tl))
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a tl) matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a tl)
                      matita_basics_bool.true)) =>
            (H : cic.Univ (cic.type cic.z) =>
             __1 : cic.Term (cic.type cic.z) H =>
             __2 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
             matita_basics_lists_list.mem
               (cic.lift (cic.type cic.z) (cic.type cic.z) H) __1 __2)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              a
              (matita_basics_lists_list.cons
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 b tl))
           (eqab :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              b
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      x b) =>
               cic.lift cic.prop cic.prop
                 ((H : cic.Univ (cic.type cic.z) =>
                   __1 : cic.Term (cic.type cic.z) H =>
                   __2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                   matita_basics_lists_list.mem
                     (cic.lift (cic.type cic.z) (cic.type cic.z) H) __1 __2)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    x
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       b tl)))
              (matita_basics_logic.or_introl
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b b)
                 ((H : cic.Univ (cic.type cic.z) =>
                   __ : cic.Term (cic.type cic.z) H =>
                   __1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                   matita_basics_lists_list.mem
                     (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b tl)
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b))
              a
              (matita_basics_logic.proj1
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S a b)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S a b)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a b))
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a b)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a b) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S a b)
                       matita_basics_bool.true))
                 (matita_basics_deqsets.eqb_true S a b) eqab))
           (memtl :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true) =>
            matita_basics_logic.or_intror
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a b)
              ((H : cic.Univ (cic.type cic.z) =>
                __ : cic.Term (cic.type cic.z) H =>
                __1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) H)) =>
                matita_basics_lists_list.mem
                  (cic.lift (cic.type cic.z) (cic.type cic.z) H) __ __1)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a tl)
              (Hind memtl))
           (matita_basics_bool.orb_true_l (matita_basics_deqsets.eqb S a b)
              (matita_basics_lists_listb.memb S a tl) mema))
        l.

def uniqueb :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (_l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               matita_basics_bool.bool))).

def uniqueb_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (_l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               matita_basics_bool.bool))).

[ S, _l ] uniqueb S _l -->
  matita_basics_lists_list.filter_list (cic.type cic.z)
    ((_xxx :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.carr _xxx) S)
    (_l :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) S))) =>
     matita_basics_bool.bool)
    (matita_basics_lists_listb.uniqueb_body S) _l.

[ S, _l ] uniqueb_body S _l -->
  matita_basics_lists_list.match_list (cic.type cic.z)
    (cic.lift (cic.type cic.z) (cic.type cic.z)
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) S))
    (__ :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) S))) =>
     matita_basics_bool.bool)
    matita_basics_bool.true
    (a :
       cic.Term (cic.type cic.z)
         ((_xxx :
             cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
           matita_basics_deqsets.carr _xxx) S) =>
     tl :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) S))) =>
     matita_basics_bool.andb
       (matita_basics_bool.notb (matita_basics_lists_listb.memb S a tl))
       (matita_basics_lists_listb.uniqueb S tl))
    _l.

def unique_append :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (D :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) D)))
              (__ :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) D))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) D))) =>
                  (_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))))).

def unique_append_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (D :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) D)))
              (__ :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) D))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) D))) =>
                  (_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))))).

def let_r :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (D :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) D)))
              (__ :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) D))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) D)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) D))) =>
                  cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) D)
                    (a :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) D) =>
                     cic.prod (cic.type cic.z) (cic.type cic.z)
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) D)))
                       (tl :
                          cic.Term (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) D))) =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) D))))))))
      :=
      D : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      __ :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) D))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) D))) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) D) =>
      tl :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) D))) =>
      matita_basics_lists_listb.unique_append D tl l2.

[ D, __ ] unique_append D __ -->
  matita_basics_lists_list.filter_list (cic.type cic.z)
    ((_xxx :
        cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      matita_basics_deqsets.carr _xxx) D)
    (__ :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     cic.prod (cic.type cic.z) (cic.type cic.z)
       ((_A : cic.Univ (cic.type cic.z) =>
         matita_basics_lists_list.list
           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) D)))
       (__1 :
          cic.Term (cic.type cic.z)
            ((_A : cic.Univ (cic.type cic.z) =>
              matita_basics_lists_list.list
                (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
               (cic.lift (cic.type cic.z) (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) D))) =>
        (_A : cic.Univ (cic.type cic.z) =>
         matita_basics_lists_list.list
           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) D))))
    (matita_basics_lists_listb.unique_append_body D) __.

[ D, __ ] unique_append_body D __ -->
  l2 :
    cic.Term (cic.type cic.z)
      ((_A : cic.Univ (cic.type cic.z) =>
        matita_basics_lists_list.list
          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
         (cic.lift (cic.type cic.z) (cic.type cic.z)
            ((_xxx :
                cic.Term (cic.type (cic.s cic.z))
                  matita_basics_deqsets.DeqSet =>
              matita_basics_deqsets.carr _xxx) D))) =>
  matita_basics_lists_list.match_list (cic.type cic.z)
    (cic.lift (cic.type cic.z) (cic.type cic.z)
       ((_xxx :
           cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
         matita_basics_deqsets.carr _xxx) D))
    (__1 :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     (_A : cic.Univ (cic.type cic.z) =>
      matita_basics_lists_list.list
        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
       (cic.lift (cic.type cic.z) (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) D)))
    l2
    (a :
       cic.Term (cic.type cic.z)
         ((_xxx :
             cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
           matita_basics_deqsets.carr _xxx) D) =>
     tl :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z)
               ((_xxx :
                   cic.Term (cic.type (cic.s cic.z))
                     matita_basics_deqsets.DeqSet =>
                 matita_basics_deqsets.carr _xxx) D))) =>
     matita_basics_bool.match_bool (cic.type cic.z)
       (__1 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
        (_A : cic.Univ (cic.type cic.z) =>
         matita_basics_lists_list.list
           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) D)))
       (matita_basics_lists_listb.let_r D __ l2 a tl)
       (matita_basics_lists_list.cons
          (cic.lift (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) D))
          a (matita_basics_lists_listb.let_r D __ l2 a tl))
       (matita_basics_lists_listb.memb D a
          (matita_basics_lists_listb.let_r D __ l2 a tl)))
    __.

def memb_unique_append :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S)
              (a :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_listb.unique_append S l1 l2))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_listb.unique_append S
                                     l1 l2))
                               matita_basics_bool.true) =>
                        (_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.Or _A _B)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S a l1)
                             matita_basics_bool.true)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S a l2)
                             matita_basics_bool.true)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_listb.unique_append S _x_716 l2))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a
                            (matita_basics_lists_listb.unique_append S _x_716
                               l2))
                         matita_basics_bool.true) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a _x_716)
                       matita_basics_bool.true)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l2)
                       matita_basics_bool.true)))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l2)
                matita_basics_bool.true) =>
         matita_basics_logic.or_intror
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false matita_basics_bool.true)
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l2) matita_basics_bool.true)
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S a l2) H))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_listb.unique_append S tl l2))
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb S a
                              (matita_basics_lists_listb.unique_append S tl
                                 l2))
                           matita_basics_bool.true) =>
                    (_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a tl)
                         matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.true)))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a b)
                      matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))
                       (matita_basics_lists_listb.unique_append S tl l2)
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b (matita_basics_lists_listb.unique_append S tl l2))
                       (matita_basics_lists_listb.memb S b
                          (matita_basics_lists_listb.unique_append S tl l2))))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             (_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)))
                            (matita_basics_lists_listb.unique_append S tl l2)
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               b
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))
                            (matita_basics_lists_listb.memb S b
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))))
                      matita_basics_bool.true) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a tl)
                       (matita_basics_deqsets.eqb S a b))
                    matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true)))
           (Hab :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             (matita_basics_lists_listb.memb S b
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_listb.unique_append S
                                     tl l2)
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     b
                                     (matita_basics_lists_listb.unique_append
                                        S tl l2))
                                  (matita_basics_lists_listb.memb S b
                                     (matita_basics_lists_listb.unique_append
                                        S tl l2))))
                            matita_basics_bool.true) =>
                     (_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S a tl) x)
                          matita_basics_bool.true)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l2)
                          matita_basics_bool.true))))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             (_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)))
                            (matita_basics_lists_listb.unique_append S tl l2)
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               b
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))
                            (matita_basics_lists_listb.memb S b
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))))
                      matita_basics_bool.true) =>
               matita_basics_logic.or_introl
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.true)
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true)
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true))
              (matita_basics_deqsets.eqb S a b) Hab)
           (Hab :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             (matita_basics_lists_listb.memb S b
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_listb.unique_append S
                                     tl l2)
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     b
                                     (matita_basics_lists_listb.unique_append
                                        S tl l2))
                                  (matita_basics_lists_listb.memb S b
                                     (matita_basics_lists_listb.unique_append
                                        S tl l2))))
                            matita_basics_bool.true) =>
                     (_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S a tl) x)
                          matita_basics_bool.true)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l2)
                          matita_basics_bool.true))))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             __))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_listb.unique_append S
                                     tl l2)
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     b
                                     (matita_basics_lists_listb.unique_append
                                        S tl l2))
                                  __))
                            matita_basics_bool.true) =>
                     (_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a tl)
                          matita_basics_bool.true)
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l2)
                          matita_basics_bool.true)))
                 (Hind l2)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))
                                x)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     (matita_basics_lists_listb.memb S a
                                        (matita_basics_lists_listb.unique_append
                                           S tl l2))
                                     x)
                                  matita_basics_bool.true) =>
                           (_A : cic.Univ cic.prop =>
                            _B : cic.Univ cic.prop =>
                            matita_basics_logic.Or _A _B)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S a tl)
                                matita_basics_bool.true)
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S a l2)
                                matita_basics_bool.true))))
                    (Hind l2) (matita_basics_deqsets.eqb S a b) Hab)
                 (matita_basics_lists_listb.memb S b
                    (matita_basics_lists_listb.unique_append S tl l2)))
              (matita_basics_deqsets.eqb S a b) Hab)
           (matita_basics_bool.true_or_false
              (matita_basics_deqsets.eqb S a b)))
        l1.

def unique_append_elim :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.univ cic.prop))
              (P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S) =>
                       cic.univ cic.prop)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l1 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l2 :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S) =>
                           cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S x l1)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb S x l1)
                                     matita_basics_bool.true) =>
                              (__1 :
                                 cic.Term (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S) =>
                               P __1) x)))
                       (__ :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S)
                               (x :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S) =>
                                cic.prod cic.prop cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb S x l1)
                                     matita_basics_bool.true)
                                  (__ :
                                     cic.Term cic.prop
                                       ((A :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         __ :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A)
                                           _x __)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb S x
                                             l1)
                                          matita_basics_bool.true) =>
                                   (__1 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    P __1) x))) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S) =>
                              cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb S x l2)
                                   matita_basics_bool.true)
                                (__1 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb S x
                                           l2)
                                        matita_basics_bool.true) =>
                                 (__2 :
                                    cic.Term (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S) =>
                                  P __2) x)))
                          (__1 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S) =>
                                   cic.prod cic.prop cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb S x
                                           l2)
                                        matita_basics_bool.true)
                                     (__1 :
                                        cic.Term cic.prop
                                          ((A :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            __1 :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A)
                                              _x __1)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                S x l2)
                                             matita_basics_bool.true) =>
                                      (__2 :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S) =>
                                       P __2) x))) =>
                           cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S) =>
                              cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __2 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __2)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb S x
                                      (matita_basics_lists_listb.unique_append
                                         S l1 l2))
                                   matita_basics_bool.true)
                                (__2 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __2 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __2)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb S x
                                           (matita_basics_lists_listb.unique_append
                                              S l1 l2))
                                        matita_basics_bool.true) =>
                                 (__3 :
                                    cic.Term (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S) =>
                                  P __3) x)))))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              cic.univ cic.prop)) =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      Hl1 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x l1)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S x l1)
                        matita_basics_bool.true) =>
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  P __1) x))) =>
      Hl2 :
        cic.Term cic.prop
          (cic.prod (cic.type cic.z) cic.prop
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (x :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x l2)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S x l2)
                        matita_basics_bool.true) =>
                 (__1 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  P __1) x))) =>
      x :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      membx :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_basics_lists_listb.memb S x
                (matita_basics_lists_listb.unique_append S l1 l2))
             matita_basics_bool.true) =>
      matita_basics_logic.match_Or cic.prop
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb S x l1) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb S x l2) matita_basics_bool.true)
        (__ :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x l1)
                   matita_basics_bool.true)
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x l2)
                   matita_basics_bool.true)) =>
         (__1 :
            cic.Term (cic.type cic.z)
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) S) =>
          P __1) x)
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S x l1)
                matita_basics_bool.true) =>
         Hl1 x
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x0 matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S x l1) auto))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S x l2)
                matita_basics_bool.true) =>
         Hl2 x
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x0 matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S x l2) auto))
        (matita_basics_lists_listb.memb_unique_append S x l1 l2 membx).

def unique_append_unique :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S l2)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb S l2)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S
                          (matita_basics_lists_listb.unique_append S l1 l2))
                       matita_basics_bool.true)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb S l2)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb S l2)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb S
                       (matita_basics_lists_listb.unique_append S _x_716 l2))
                    matita_basics_bool.true))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S l2)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_basics_lists_listb.uniqueb S l2) auto)
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb S l2)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb S l2)
                           matita_basics_bool.true) =>
                    (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb S
                         (matita_basics_lists_listb.unique_append S tl l2))
                      matita_basics_bool.true))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         uniquel2 :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S l2)
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a
                 (matita_basics_lists_listb.unique_append S tl l2))
              matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a
                 (matita_basics_lists_listb.unique_append S tl l2))
              matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_listb.unique_append S tl l2))
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_listb.unique_append S tl l2))
                      matita_basics_bool.false)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb S
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     (_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (matita_basics_lists_listb.unique_append S tl l2)
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a (matita_basics_lists_listb.unique_append S tl l2))
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_listb.unique_append S tl l2))))
              matita_basics_bool.true)
           (H :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_listb.unique_append S tl l2))
                   matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb S
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           (_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          (matita_basics_lists_listb.unique_append S tl l2)
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a
                             (matita_basics_lists_listb.unique_append S tl l2))
                          x))
                    matita_basics_bool.true))
              (Hind l2
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_lists_listb.uniqueb S l2) uniquel2))
              (matita_basics_lists_listb.memb S a
                 (matita_basics_lists_listb.unique_append S tl l2))
              H)
           (H :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_listb.unique_append S tl l2))
                   matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb S
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           (_A : cic.Univ (cic.type cic.z) =>
                            matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          (matita_basics_lists_listb.unique_append S tl l2)
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a
                             (matita_basics_lists_listb.unique_append S tl l2))
                          x))
                    matita_basics_bool.true))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb S
                             (matita_basics_lists_listb.unique_append S tl l2))
                          matita_basics_bool.false
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.false matita_basics_bool.true
                             x))
                       matita_basics_bool.true))
                 (Hind l2
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.uniqueb S l2) uniquel2))
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_listb.unique_append S tl l2))
                 H)
              (matita_basics_lists_listb.memb S a
                 (matita_basics_lists_listb.unique_append S tl l2))
              H)
           (matita_basics_bool.true_or_false
              (matita_basics_lists_listb.memb S a
                 (matita_basics_lists_listb.unique_append S tl l2))))
        l1.

def uniqueb_append :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))) =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb A l1)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb A l1)
                            matita_basics_bool.true) =>
                     cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb A l2)
                          matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.uniqueb A l2)
                               matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          (cic.prod (cic.type cic.z) cic.prop
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A)
                             (a :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              cic.prod cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __2 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __2)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a l1)
                                   matita_basics_bool.true)
                                (__2 :
                                   cic.Term cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __2 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __2)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb A a
                                           l1)
                                        matita_basics_bool.true) =>
                                 (_A : cic.Univ cic.prop =>
                                  matita_basics_logic.Not _A)
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __3 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __3)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a l2)
                                      matita_basics_bool.true))))
                          (__2 :
                             cic.Term cic.prop
                               (cic.prod (cic.type cic.z) cic.prop
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A)
                                  (a :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) A) =>
                                   cic.prod cic.prop cic.prop
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __2 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __2)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb A a
                                           l1)
                                        matita_basics_bool.true)
                                     (__2 :
                                        cic.Term cic.prop
                                          ((A1 :
                                              cic.Univ
                                                (cic.type
                                                   (cic.s (cic.s cic.z))) =>
                                            _x :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1 =>
                                            __2 :
                                              cic.Term
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1 =>
                                            matita_basics_logic.eq
                                              (cic.lift
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A1)
                                              _x __2)
                                             (cic.lift (cic.type cic.z)
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                matita_basics_bool.bool)
                                             (matita_basics_lists_listb.memb
                                                A a l1)
                                             matita_basics_bool.true) =>
                                      (_A : cic.Univ cic.prop =>
                                       matita_basics_logic.Not _A)
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __3 :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __3)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_lists_listb.memb A
                                              a l2)
                                           matita_basics_bool.true)))) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __3 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __3)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb A
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   l1 l2))
                             matita_basics_bool.true)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))) =>
               cic.prod cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb A _x_716)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb A _x_716)
                         matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb A l2)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb A l2)
                            matita_basics_bool.true) =>
                     cic.prod cic.prop cic.prop
                       (cic.prod (cic.type cic.z) cic.prop
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)
                          (a :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A) =>
                           cic.prod cic.prop cic.prop
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb A a _x_716)
                                matita_basics_bool.true)
                             (__2 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb A a
                                        _x_716)
                                     matita_basics_bool.true) =>
                              (_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __3 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __3)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a l2)
                                   matita_basics_bool.true))))
                       (__2 :
                          cic.Term cic.prop
                            (cic.prod (cic.type cic.z) cic.prop
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A)
                               (a :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A) =>
                                cic.prod cic.prop cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __2 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __2)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb A a
                                        _x_716)
                                     matita_basics_bool.true)
                                  (__2 :
                                     cic.Term cic.prop
                                       ((A1 :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         __2 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1)
                                           _x __2)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb A a
                                             _x_716)
                                          matita_basics_bool.true) =>
                                   (_A : cic.Univ cic.prop =>
                                    matita_basics_logic.Not _A)
                                     ((A1 :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       __3 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1 =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A1)
                                         _x __3)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_lists_listb.memb A a
                                           l2)
                                        matita_basics_bool.true)))) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __3 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __3)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.uniqueb A
                             (matita_basics_lists_list.append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                _x_716 l2))
                          matita_basics_bool.true))))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         auto :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A l2)
                matita_basics_bool.true) =>
         auto'' :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A)
                (a :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) A) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      matita_basics_bool.false matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           matita_basics_bool.false matita_basics_bool.true) =>
                    (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb A a l2)
                         matita_basics_bool.true)))) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_basics_lists_listb.uniqueb A l2) auto')
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A))) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb A tl)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb A tl)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb A l2)
                         matita_basics_bool.true)
                      (__1 :
                         cic.Term cic.prop
                           ((A1 :
                               cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             __1 :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A1)
                               _x __1)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (matita_basics_lists_listb.uniqueb A l2)
                              matita_basics_bool.true) =>
                       cic.prod cic.prop cic.prop
                         (cic.prod (cic.type cic.z) cic.prop
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A)
                            (a0 :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A) =>
                             cic.prod cic.prop cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __2 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __2)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb A a0 tl)
                                  matita_basics_bool.true)
                               (__2 :
                                  cic.Term cic.prop
                                    ((A1 :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.memb A a0
                                          tl)
                                       matita_basics_bool.true) =>
                                (_A : cic.Univ cic.prop =>
                                 matita_basics_logic.Not _A)
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __3 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __3)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb A a0 l2)
                                     matita_basics_bool.true))))
                         (__2 :
                            cic.Term cic.prop
                              (cic.prod (cic.type cic.z) cic.prop
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A)
                                 (a0 :
                                    cic.Term (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A) =>
                                  cic.prod cic.prop cic.prop
                                    ((A1 :
                                        cic.Univ
                                          (cic.type (cic.s (cic.s cic.z))) =>
                                      _x :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      __2 :
                                        cic.Term
                                          (cic.type (cic.s (cic.s cic.z))) A1 =>
                                      matita_basics_logic.eq
                                        (cic.lift
                                           (cic.type (cic.s (cic.s cic.z)))
                                           (cic.type (cic.s (cic.s cic.z)))
                                           A1)
                                        _x __2)
                                       (cic.lift (cic.type cic.z)
                                          (cic.type (cic.s (cic.s cic.z)))
                                          matita_basics_bool.bool)
                                       (matita_basics_lists_listb.memb A a0
                                          tl)
                                       matita_basics_bool.true)
                                    (__2 :
                                       cic.Term cic.prop
                                         ((A1 :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           __2 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1 =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A1)
                                             _x __2)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (matita_basics_lists_listb.memb A
                                               a0 tl)
                                            matita_basics_bool.true) =>
                                     (_A : cic.Univ cic.prop =>
                                      matita_basics_logic.Not _A)
                                       ((A1 :
                                           cic.Univ
                                             (cic.type (cic.s (cic.s cic.z))) =>
                                         _x :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         __3 :
                                           cic.Term
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A1 =>
                                         matita_basics_logic.eq
                                           (cic.lift
                                              (cic.type (cic.s (cic.s cic.z)))
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1)
                                           _x __3)
                                          (cic.lift (cic.type cic.z)
                                             (cic.type (cic.s (cic.s cic.z)))
                                             matita_basics_bool.bool)
                                          (matita_basics_lists_listb.memb A
                                             a0 l2)
                                          matita_basics_bool.true)))) =>
                          (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __3 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __3)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb A
                               (matita_basics_lists_list.append
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  tl l2))
                            matita_basics_bool.true))))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hatl :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a tl))
                matita_basics_bool.true) =>
         Hl2 :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A l2)
                matita_basics_bool.true) =>
         Hmem :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A)
                (a0 :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) A) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb A a0
                         (matita_basics_lists_list.cons
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a tl))
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb A a0
                              (matita_basics_lists_list.cons
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A))
                                 a tl))
                           matita_basics_bool.true) =>
                    (_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb A a0 l2)
                         matita_basics_bool.true)))) =>
         matita_basics_logic.eq_ind_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            cic.lift cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb A
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          tl l2))
                    matita_basics_bool.false
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.false matita_basics_bool.true x))
                 matita_basics_bool.true))
           (Hind l2
              (matita_basics_bool.andb_true_r
                 (matita_basics_bool.notb
                    (matita_basics_lists_listb.memb A a tl))
                 (matita_basics_lists_listb.uniqueb A tl) Hatl)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       x matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 (matita_basics_lists_listb.uniqueb A l2) Hl2)
              (x :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               Hmemx :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb A x tl)
                      matita_basics_bool.true) =>
               Hmem x
                 (matita_basics_bool.orb_true_r2
                    (matita_basics_deqsets.eqb A x a)
                    (matita_basics_lists_listb.memb A x tl)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x0 matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb A x tl) Hmemx))))
           (matita_basics_lists_listb.memb A a
              (matita_basics_lists_list.append
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 tl l2))
           (matita_basics_bool.noteq_to_eqnot
              (matita_basics_lists_listb.memb A a
                 (matita_basics_lists_list.append
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    tl l2))
              matita_basics_bool.true
              (matita_basics_logic.nmk
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb A a
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          tl l2))
                    matita_basics_bool.true)
                 (Happend :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb A a
                            (matita_basics_lists_list.append
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               tl l2))
                         matita_basics_bool.true) =>
                  matita_basics_logic.match_Or cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a tl)
                       matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a l2)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.Or _A _B)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb A a tl)
                               matita_basics_bool.true)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb A a l2)
                               matita_basics_bool.true)) =>
                     matita_basics_logic.False)
                    (H1 :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb A a tl)
                            matita_basics_bool.true) =>
                     matita_basics_logic.absurd
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a tl)
                          matita_basics_bool.true)
                       H1
                       (matita_basics_logic.sym_not_eq
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb A a tl)
                          (matita_basics_bool.eqnot_to_noteq
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb A a tl)
                             (matita_basics_logic.sym_eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.notb
                                   (matita_basics_lists_listb.memb A a tl))
                                matita_basics_bool.true
                                (matita_basics_bool.andb_true_l
                                   (matita_basics_bool.notb
                                      (matita_basics_lists_listb.memb A a tl))
                                   (matita_basics_lists_listb.uniqueb A tl)
                                   Hatl)))))
                    (H :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb A a l2)
                            matita_basics_bool.true) =>
                     matita_basics_logic.absurd
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a l2)
                          matita_basics_bool.true)
                       H
                       (Hmem a
                          (matita_basics_logic.eq_ind_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     x matita_basics_bool.true) =>
                              cic.lift cic.prop cic.prop
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       matita_basics_bool.bool)
                                      matita_basics_bool.true
                                      (matita_basics_lists_listb.memb A a tl)
                                      x)
                                   matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (__ :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   (matita_basics_lists_listb.memb A a tl)
                                   matita_basics_bool.true))
                             (matita_basics_deqsets.eqb A a a)
                             (matita_basics_logic.proj2
                                (cic.prod cic.prop cic.prop
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_deqsets.eqb A a a)
                                      matita_basics_bool.true)
                                   (__ :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_deqsets.eqb A a a)
                                           matita_basics_bool.true) =>
                                    (A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a a))
                                (cic.prod cic.prop cic.prop
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      a a)
                                   (__ :
                                      cic.Term cic.prop
                                        ((A1 :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A1 =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A1)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           a a) =>
                                    (A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_deqsets.eqb A a a)
                                      matita_basics_bool.true))
                                (matita_basics_deqsets.eqb_true A a a)
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a)))))
                    (matita_basics_lists_listb.memb_append A a tl l2 Happend)))))
        l1.

def memb_map_to_exists :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     (_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          (_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B)
                       (b :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb B b
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   f l))
                             matita_basics_bool.true)
                          (__ :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb B b
                                     (matita_basics_lists_list.map
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              B))
                                        f l))
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type cic.z) =>
                            _P :
                              cic.Term (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   A1
                                   (__1 : cic.Term (cic.type cic.z) A1 =>
                                    cic.univ cic.prop)) =>
                            matita_basics_logic.ex
                              (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
                              _P)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (a :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A) =>
                              cic.lift cic.prop cic.prop
                                ((_A : cic.Univ cic.prop =>
                                  _B : cic.Univ cic.prop =>
                                  matita_basics_logic.And _A _B)
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a l)
                                      matita_basics_bool.true)
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __1 :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __1)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      (f a) b))))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B)) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_xxx :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                matita_basics_deqsets.carr _xxx) B)
              (b :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) B) =>
               cic.prod cic.prop cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb B b
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          f _x_716))
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb B b
                            (matita_basics_lists_list.map
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               f _x_716))
                         matita_basics_bool.true) =>
                  (A1 : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                          (__1 : cic.Term (cic.type cic.z) A1 =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (a :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A a _x_716)
                             matita_basics_bool.true)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             (f a) b)))))))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         H :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_bool.bool_discr matita_basics_bool.false
           matita_basics_bool.true H
           (cic.lift cic.prop (cic.type (cic.s cic.z))
              ((A1 : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                       (__ : cic.Term (cic.type cic.z) A1 =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (a :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.false matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (f a) b))))))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B)
                (b :
                   cic.Term (cic.type cic.z)
                     ((_xxx :
                         cic.Term (cic.type (cic.s cic.z))
                           matita_basics_deqsets.DeqSet =>
                       matita_basics_deqsets.carr _xxx) B) =>
                 cic.prod cic.prop cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb B b
                         (matita_basics_lists_list.map
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            f tl))
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          __ :
                            cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A1)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.memb B b
                              (matita_basics_lists_list.map
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) B))
                                 f tl))
                           matita_basics_bool.true) =>
                    (A1 : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                            (__1 : cic.Term (cic.type cic.z) A1 =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (a0 :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A) =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb A a0 tl)
                               matita_basics_bool.true)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               (f a0) b)))))) =>
         b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B) =>
         H :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb B b
                   (matita_basics_lists_list.map
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      f
                      (matita_basics_lists_list.cons
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a tl)))
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb B b (f a)) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb B b
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr B))
                    f tl))
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb B b (f a))
                      matita_basics_bool.true)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb B b
                         (matita_basics_lists_list.map
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            f tl))
                      matita_basics_bool.true)) =>
            (A1 : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                    (__1 : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (a0 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a0
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a tl))
                       matita_basics_bool.true)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       (f a0) b))))
           (eqb :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb B b (f a))
                   matita_basics_bool.true) =>
            matita_basics_logic.ex_intro
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) A))
              (a0 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               cic.lift cic.prop cic.prop
                 ((_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a0
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a tl))
                       matita_basics_bool.true)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       (f a0) b)))
              a
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 b
                 (x_1 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) B) =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         b x_1) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a tl))
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          x_1 b)))
                 (matita_basics_logic.conj
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a tl))
                       matita_basics_bool.true)
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b b)
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb A a
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             a tl))
                       (matita_basics_lists_listb.memb_hd A a tl))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       b))
                 (f a)
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb B b (f a))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb B b (f a))
                               matita_basics_bool.true) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b (f a)))
                    (cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b (f a))
                       (__ :
                          cic.Term cic.prop
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               b (f a)) =>
                        (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb B b (f a))
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true B b (f a)) eqb)))
           (memb :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb B b
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         f tl))
                   matita_basics_bool.true) =>
            matita_basics_logic.match_ex cic.prop
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 (matita_basics_deqsets.carr A))
              (a0 :
                 cic.Term (cic.type cic.z) (matita_basics_deqsets.carr A) =>
               cic.lift cic.prop cic.prop
                 (matita_basics_logic.And
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb A a0 tl)
                       matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_deqsets.carr B))
                       (f a0) b)))
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                            (__ : cic.Term (cic.type cic.z) A1 =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (a0 :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) A) =>
                       cic.lift cic.prop cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.And _A _B)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb A a0 tl)
                               matita_basics_bool.true)
                            ((A1 :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A1)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               (f a0) b)))) =>
               (A1 : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                       (__1 : cic.Term (cic.type cic.z) A1 =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (a0 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) A) =>
                  cic.lift cic.prop cic.prop
                    ((_A : cic.Univ cic.prop =>
                      _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a0
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a tl))
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (f a0) b))))
              (a0 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A) =>
               _clearme :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb A a0 tl)
                         matita_basics_bool.true)
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         (f a0) b)) =>
               matita_basics_logic.match_And cic.prop
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb A a0 tl)
                    matita_basics_bool.true)
                 ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A1)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    (f a0) b)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.And _A _B)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb A a0 tl)
                            matita_basics_bool.true)
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            (f a0) b)) =>
                  (A1 : cic.Univ (cic.type cic.z) =>
                   _P :
                     cic.Term (cic.type cic.z)
                       (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                          (__1 : cic.Term (cic.type cic.z) A1 =>
                           cic.univ cic.prop)) =>
                   matita_basics_logic.ex
                     (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (a00 :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A a00
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a tl))
                             matita_basics_bool.true)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             (f a00) b))))
                 (mema :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb A a0 tl)
                         matita_basics_bool.true) =>
                  eqb :
                    cic.Term cic.prop
                      ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A1)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         (f a0) b) =>
                  matita_basics_logic.ex_intro
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (a00 :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     cic.lift cic.prop cic.prop
                       ((_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb A a00
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   a tl))
                             matita_basics_bool.true)
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             (f a00) b)))
                    a0
                    (matita_basics_logic.conj
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a0
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                a tl))
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          (f a0) b)
                       (matita_basics_bool.orb_true_r2
                          (matita_basics_deqsets.eqb A a0 a)
                          (matita_basics_lists_listb.memb A a0 tl)
                          (matita_basics_logic.rewrite_r
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              cic.lift cic.prop
                                (cic.type (cic.s (cic.s cic.z)))
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   x matita_basics_bool.true))
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true)
                             (matita_basics_lists_listb.memb A a0 tl) mema))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          b
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B) =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                x b))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             b)
                          (f a0) eqb)))
                 _clearme)
              (Hind b memb))
           (matita_basics_bool.orb_true_l
              (matita_basics_deqsets.eqb B b (f a))
              (matita_basics_lists_listb.memb B b
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    f tl))
              H))
        l.

def memb_map_inj :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     (_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          (_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))) =>
                     cic.prod (cic.type cic.z) cic.prop
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A)
                       (a :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type cic.z) =>
                            B1 : cic.Univ (cic.type cic.z) =>
                            _f :
                              cic.Term (cic.type cic.z)
                                (cic.prod (cic.type cic.z) (cic.type cic.z)
                                   A1
                                   (__ : cic.Term (cic.type cic.z) A1 => B1)) =>
                            matita_basics_relations.injective
                              (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
                              (cic.lift (cic.type cic.z) (cic.type cic.z) B1)
                              _f)
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) A))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) B))
                             f)
                          (__ :
                             cic.Term cic.prop
                               ((A1 : cic.Univ (cic.type cic.z) =>
                                 B1 : cic.Univ (cic.type cic.z) =>
                                 _f :
                                   cic.Term (cic.type cic.z)
                                     (cic.prod (cic.type cic.z)
                                        (cic.type cic.z) A1
                                        (__ : cic.Term (cic.type cic.z) A1 =>
                                         B1)) =>
                                 matita_basics_relations.injective
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) A1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) B1)
                                   _f)
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) B))
                                  f) =>
                           cic.prod cic.prop cic.prop
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb B (f a)
                                   (matita_basics_lists_list.map
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) B))
                                      f l))
                                matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_lists_listb.memb B (f a)
                                        (matita_basics_lists_list.map
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 B))
                                           f l))
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb A a l)
                                matita_basics_bool.true))))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B)) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) A) =>
      injf :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type cic.z) =>
            B1 : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                   (__ : cic.Term (cic.type cic.z) A1 => B1)) =>
            matita_basics_relations.injective
              (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
              (cic.lift (cic.type cic.z) (cic.type cic.z) B1) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))
             f) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb B (f a)
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       f _x_716))
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb B (f a)
                         (matita_basics_lists_list.map
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            f _x_716))
                      matita_basics_bool.true) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb A a _x_716)
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (a1 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb B (f a)
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         f tl))
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A1)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb B (f a)
                           (matita_basics_lists_list.map
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) A))
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) B))
                              f tl))
                        matita_basics_bool.true) =>
                 (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb A a tl)
                   matita_basics_bool.true)) =>
         Ha :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb B (f a)
                   (matita_basics_lists_list.map
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B))
                      f
                      (matita_basics_lists_list.cons
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         a1 tl)))
                matita_basics_bool.true) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb B (f a) (f a1))
              matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb B (f a)
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr B))
                    f tl))
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb B (f a) (f a1))
                      matita_basics_bool.true)
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb B (f a)
                         (matita_basics_lists_list.map
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) B))
                            f tl))
                      matita_basics_bool.true)) =>
            (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A1)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb A a
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1 tl))
              matita_basics_bool.true)
           (eqf :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb B (f a) (f a1))
                   matita_basics_bool.true) =>
            matita_basics_bool.orb_true_r1 (matita_basics_deqsets.eqb A a a1)
              (matita_basics_lists_listb.memb A a tl)
              (matita_basics_logic.proj2
                 (cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb A a a1)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb A a a1)
                            matita_basics_bool.true) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a a1))
                 (cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a a1)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            a a1) =>
                     (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A1)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb A a a1)
                       matita_basics_bool.true))
                 (matita_basics_deqsets.eqb_true A a a1)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    a1
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     __ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A1)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))
                            x a1) =>
                     cic.lift cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __1 :
                           cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          x a1))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       a1)
                    a
                    (injf a a1
                       (matita_basics_logic.proj1
                          (cic.prod cic.prop cic.prop
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B (f a) (f a1))
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb B (f a)
                                        (f a1))
                                     matita_basics_bool.true) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (f a) (f a1)))
                          (cic.prod cic.prop cic.prop
                             ((A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                (f a) (f a1))
                             (__ :
                                cic.Term cic.prop
                                  ((A1 :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A1 =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A1)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) B))
                                     (f a) (f a1)) =>
                              (A1 :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A1)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb B (f a) (f a1))
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true B (f a) (f a1)) eqf)))))
           (membtl :
              cic.Term cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb B (f a)
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         f tl))
                   matita_basics_bool.true) =>
            matita_basics_bool.orb_true_r2 (matita_basics_deqsets.eqb A a a1)
              (matita_basics_lists_listb.memb A a tl)
              (Hind
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_lists_listb.memb B (f a)
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          f tl))
                    membtl)))
           (matita_basics_bool.orb_true_l
              (matita_basics_deqsets.eqb B (f a) (f a1))
              (matita_basics_lists_listb.memb B (f a)
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    f tl))
              Ha))
        l.

def unique_map_inj :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (A :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type (cic.s cic.z)) cic.prop
              matita_basics_deqsets.DeqSet
              (B :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A) =>
                     (_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) A) =>
                          (_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) B)) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) A))) =>
                     cic.prod cic.prop cic.prop
                       ((A1 : cic.Univ (cic.type cic.z) =>
                         B1 : cic.Univ (cic.type cic.z) =>
                         _f :
                           cic.Term (cic.type cic.z)
                             (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                                (__ : cic.Term (cic.type cic.z) A1 => B1)) =>
                         matita_basics_relations.injective
                           (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
                           (cic.lift (cic.type cic.z) (cic.type cic.z) B1) _f)
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          f)
                       (__ :
                          cic.Term cic.prop
                            ((A1 : cic.Univ (cic.type cic.z) =>
                              B1 : cic.Univ (cic.type cic.z) =>
                              _f :
                                cic.Term (cic.type cic.z)
                                  (cic.prod (cic.type cic.z) (cic.type cic.z)
                                     A1
                                     (__ : cic.Term (cic.type cic.z) A1 => B1)) =>
                              matita_basics_relations.injective
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   A1)
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   B1)
                                _f)
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) B))
                               f) =>
                        cic.prod cic.prop cic.prop
                          ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb A l)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.uniqueb A l)
                                  matita_basics_bool.true) =>
                           (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A1)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.uniqueb B
                                (matita_basics_lists_list.map
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) B))
                                   f l))
                             matita_basics_bool.true)))))))
      :=
      A : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      B : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) A) =>
              (_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) B)) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))) =>
      injf :
        cic.Term cic.prop
          ((A1 : cic.Univ (cic.type cic.z) =>
            B1 : cic.Univ (cic.type cic.z) =>
            _f :
              cic.Term (cic.type cic.z)
                (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                   (__ : cic.Term (cic.type cic.z) A1 => B1)) =>
            matita_basics_relations.injective
              (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
              (cic.lift (cic.type cic.z) (cic.type cic.z) B1) _f)
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) B))
             f) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) A))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb A _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A1)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb A _x_716)
                      matita_basics_bool.true) =>
               (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A1)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb B
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       f _x_716))
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true)
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) A) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) A))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb A tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A1)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.uniqueb A tl)
                        matita_basics_bool.true) =>
                 (A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A1)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb B
                      (matita_basics_lists_list.map
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) B))
                         f tl))
                   matita_basics_bool.true)) =>
         Htl :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A1)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb A
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) A))
                      a tl))
                matita_basics_bool.true) =>
         matita_basics_bool.true_to_andb_true
           (matita_basics_bool.notb
              (matita_basics_lists_listb.memb B (f a)
                 (matita_basics_lists_list.map
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) B))
                    f tl)))
           (matita_basics_lists_listb.uniqueb B
              (matita_basics_lists_list.map
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) B))
                 f tl))
           (matita_basics_logic.sym_eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb B (f a)
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       f tl)))
              (matita_basics_bool.noteq_to_eqnot matita_basics_bool.true
                 (matita_basics_lists_listb.memb B (f a)
                    (matita_basics_lists_list.map
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) B))
                       f tl))
                 (matita_basics_logic.sym_not_eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb B (f a)
                       (matita_basics_lists_list.map
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) B))
                          f tl))
                    matita_basics_bool.true
                    (matita_basics_logic.not_to_not
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb B (f a)
                             (matita_basics_lists_list.map
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) B))
                                f tl))
                          matita_basics_bool.true)
                       ((A1 : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A1 =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A1)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb A a tl)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb_map_inj A B f tl a
                          injf)
                       (matita_basics_logic.eq_ind
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.notb
                             (matita_basics_lists_listb.memb A a tl))
                          (x_1 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           _x_2 :
                             cic.Term cic.prop
                               ((A1 :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A1 =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A1)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.notb
                                     (matita_basics_lists_listb.memb A a tl))
                                  x_1) =>
                           cic.lift cic.prop cic.prop
                             ((_A : cic.Univ cic.prop =>
                               matita_basics_logic.Not _A)
                                ((A1 :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A1 =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A1)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a tl)
                                   x_1)))
                          (matita_basics_bool.eqnot_to_noteq
                             (matita_basics_lists_listb.memb A a tl)
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb A a tl))
                             (matita_basics_logic.rewrite_r
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb A a tl)
                                (x :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 cic.lift cic.prop
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((A1 :
                                       cic.Univ
                                         (cic.type (cic.s (cic.s cic.z))) =>
                                     _x :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     __ :
                                       cic.Term
                                         (cic.type (cic.s (cic.s cic.z))) A1 =>
                                     matita_basics_logic.eq
                                       (cic.lift
                                          (cic.type (cic.s (cic.s cic.z)))
                                          (cic.type (cic.s (cic.s cic.z))) A1)
                                       _x __)
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      (matita_basics_lists_listb.memb A a tl)
                                      x))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_lists_listb.memb A a tl))
                                (matita_basics_bool.notb
                                   (matita_basics_bool.notb
                                      (matita_basics_lists_listb.memb A a tl)))
                                (matita_basics_bool.notb_notb
                                   (matita_basics_lists_listb.memb A a tl))))
                          matita_basics_bool.true
                          (matita_basics_bool.andb_true_l
                             (matita_basics_bool.notb
                                (matita_basics_lists_listb.memb A a tl))
                             (matita_basics_lists_listb.uniqueb A tl) Htl))))))
           (Hind
              (matita_basics_bool.andb_true_r
                 (matita_basics_bool.notb
                    (matita_basics_lists_listb.memb A a tl))
                 (matita_basics_lists_listb.uniqueb A tl) Htl)))
        l.

def sublist :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (_l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (_l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.univ cic.prop))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      cic.prod (cic.type cic.z) cic.prop
        ((_xxx :
            cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
          matita_basics_deqsets.carr _xxx) S)
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         cic.prod cic.prop cic.prop
           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l1) matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a l1)
                   matita_basics_bool.true) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.memb S a l2) matita_basics_bool.true)).

def sublist_length :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S l1)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb S l1)
                            matita_basics_bool.true) =>
                     cic.prod cic.prop cic.prop
                       ((S1 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         _l1 :
                           cic.Term (cic.type cic.z)
                             (matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S1))) =>
                         _l2 :
                           cic.Term (cic.type cic.z)
                             (matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S1))) =>
                         matita_basics_lists_listb.sublist S1 _l1 _l2) S l1
                          l2)
                       (__1 :
                          cic.Term cic.prop
                            ((S1 :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              _l1 :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        (matita_basics_deqsets.carr S1))) =>
                              _l2 :
                                cic.Term (cic.type cic.z)
                                  (matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        (matita_basics_deqsets.carr S1))) =>
                              matita_basics_lists_listb.sublist S1 _l1 _l2) S
                               l1 l2) =>
                        (_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __2 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __2)
                          (matita_basics_lists_list.length
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l1)
                          (matita_basics_lists_list.length
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             l2)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.uniqueb S _x_716)
                    matita_basics_bool.true)
                 (__ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.uniqueb S _x_716)
                         matita_basics_bool.true) =>
                  cic.prod cic.prop cic.prop
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S _x_716
                       l2)
                    (__1 :
                       cic.Term cic.prop
                         ((S1 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           _l1 :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     (matita_basics_deqsets.carr S1))) =>
                           _l2 :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     (matita_basics_deqsets.carr S1))) =>
                           matita_basics_lists_listb.sublist S1 _l1 _l2) S
                            _x_716 l2) =>
                     (_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __2 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __2)
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          _x_716)
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          l2))))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S
                   (matita_basics_lists_list.nil
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))))
                matita_basics_bool.true) =>
         auto' :
           cic.Term cic.prop
             ((S1 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               _l1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_deqsets.carr S1))) =>
               _l2 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_deqsets.carr S1))) =>
               matita_basics_lists_listb.sublist S1 _l1 _l2) S
                (matita_basics_lists_list.nil
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                l2) =>
         matita_arithmetics_nat.le_plus_minus_m_m
           (matita_basics_lists_list.length
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              (matita_basics_lists_list.nil
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))))
           (matita_basics_lists_list.length
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              l2))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod cic.prop cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb S tl)
                      matita_basics_bool.true)
                   (__ :
                      cic.Term cic.prop
                        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                          matita_basics_logic.eq
                            (cic.lift (cic.type (cic.s (cic.s cic.z)))
                               (cic.type (cic.s (cic.s cic.z))) A)
                            _x __)
                           (cic.lift (cic.type cic.z)
                              (cic.type (cic.s (cic.s cic.z)))
                              matita_basics_bool.bool)
                           (matita_basics_lists_listb.uniqueb S tl)
                           matita_basics_bool.true) =>
                    cic.prod cic.prop cic.prop
                      ((S1 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        _l1 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        _l2 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)
                      (__1 :
                         cic.Term cic.prop
                           ((S1 :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             _l1 :
                               cic.Term (cic.type cic.z)
                                 (matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       (matita_basics_deqsets.carr S1))) =>
                             _l2 :
                               cic.Term (cic.type cic.z)
                                 (matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       (matita_basics_deqsets.carr S1))) =>
                             matita_basics_lists_listb.sublist S1 _l1 _l2) S
                              tl l2) =>
                       (_n :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        __2 :
                          cic.Term (cic.type cic.z)
                            matita_arithmetics_nat.nat =>
                        matita_arithmetics_nat.le _n __2)
                         (matita_basics_lists_list.length
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            tl)
                         (matita_basics_lists_list.length
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            l2))))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         unique :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a tl))
                matita_basics_bool.true) =>
         sub :
           cic.Term cic.prop
             ((S1 :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               _l1 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_deqsets.carr S1))) =>
               _l2 :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         (matita_basics_deqsets.carr S1))) =>
               matita_basics_lists_listb.sublist S1 _l1 _l2) S
                (matita_basics_lists_list.cons
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   a tl)
                l2) =>
         matita_basics_logic.match_ex cic.prop
           (cic.lift (cic.type cic.z) (cic.type cic.z)
              (matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    (matita_basics_deqsets.carr S))))
           (l11 :
              cic.Term (cic.type cic.z)
                (matita_basics_lists_list.list
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      (matita_basics_deqsets.carr S))) =>
            cic.lift cic.prop cic.prop
              (matita_basics_logic.ex
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S))))
                 (l21 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S))) =>
                  cic.lift cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S))))
                       l2
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S))
                          l11
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S))
                             a l21))))))
           (__ :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))))
                   (l3 :
                      cic.Term (cic.type cic.z)
                        ((_A : cic.Univ (cic.type cic.z) =>
                          matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                           (cic.lift (cic.type cic.z) (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S))) =>
                    cic.lift cic.prop cic.prop
                      ((A : cic.Univ (cic.type cic.z) =>
                        _P :
                          cic.Term (cic.type cic.z)
                            (cic.prod (cic.type cic.z) (cic.type cic.z) A
                               (__ : cic.Term (cic.type cic.z) A =>
                                cic.univ cic.prop)) =>
                        matita_basics_logic.ex
                          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         (l4 :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S))) =>
                          cic.lift cic.prop cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))))
                               l2
                               (matita_basics_lists_list.append
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  l3
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     a l4))))))) =>
            (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
             matita_arithmetics_nat.le _n __1)
              (matita_basics_lists_list.length
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a tl))
              (matita_basics_lists_list.length
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 l2))
           (l3 :
              cic.Term (cic.type cic.z)
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))) =>
            _clearme :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A
                         (__ : cic.Term (cic.type cic.z) A =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))))
                   (l4 :
                      cic.Term (cic.type cic.z)
                        ((_A : cic.Univ (cic.type cic.z) =>
                          matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                           (cic.lift (cic.type cic.z) (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S))) =>
                    cic.lift cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         l2
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            l3
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a l4))))) =>
            matita_basics_logic.match_ex cic.prop
              (cic.lift (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))))
              (l4 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))))
                    l2
                    (matita_basics_lists_list.append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       l3
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a l4))))
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.univ cic.prop)) =>
                     matita_basics_logic.ex
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _P)
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))))
                      (l4 :
                         cic.Term (cic.type cic.z)
                           ((_A : cic.Univ (cic.type cic.z) =>
                             matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S))) =>
                       cic.lift cic.prop cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))))
                            l2
                            (matita_basics_lists_list.append
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               l3
                               (matita_basics_lists_list.cons
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  a l4))))) =>
               (_n : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                __1 : cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                matita_arithmetics_nat.le _n __1)
                 (matita_basics_lists_list.length
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl))
                 (matita_basics_lists_list.length
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    l2))
              (l4 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               eql2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))))
                      l2
                      (matita_basics_lists_list.append
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         l3
                         (matita_basics_lists_list.cons
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a l4))) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (matita_basics_lists_list.append
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    l3
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a l4))
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         x
                         (matita_basics_lists_list.append
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            l3
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a l4))) =>
                  cic.lift cic.prop cic.prop
                    ((_n :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      __1 :
                        cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.le _n __1)
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a tl))
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          x)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          l3)
                       (matita_basics_lists_list.length
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a l4)))
                    (x :
                       cic.Term (cic.type cic.z) matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.plus
                               (matita_basics_lists_list.length
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  l3)
                               (matita_basics_lists_list.length
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     a l4)))) =>
                     cic.lift cic.prop cic.prop
                       ((_n :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         __1 :
                           cic.Term (cic.type cic.z)
                             matita_arithmetics_nat.nat =>
                         matita_arithmetics_nat.le _n __1)
                          (matita_basics_lists_list.length
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                a tl))
                          x))
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   tl))
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.plus
                                   (matita_basics_lists_list.length
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      l3)
                                   (matita_basics_lists_list.length
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      l4)))))
                       (cic.lift cic.prop (cic.type cic.z)
                          ((_n :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            __ :
                              cic.Term (cic.type cic.z)
                                matita_arithmetics_nat.nat =>
                            matita_arithmetics_nat.le _n __)
                             (matita_arithmetics_nat.S
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   tl))
                             (matita_arithmetics_nat.plus
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l3)
                                (matita_arithmetics_nat.S
                                   (matita_basics_lists_list.length
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      l4)))))
                       (matita_arithmetics_nat.le_S_S
                          (matita_basics_lists_list.length
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             tl)
                          (matita_arithmetics_nat.plus
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l3)
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l4))
                          (matita_basics_logic.eq_ind
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_arithmetics_nat.nat)
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l3 l4))
                             (x_1 :
                                cic.Term (cic.type cic.z)
                                  matita_arithmetics_nat.nat =>
                              _x_2 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_arithmetics_nat.nat)
                                     (matita_basics_lists_list.length
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        (matita_basics_lists_list.append
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           l3 l4))
                                     x_1) =>
                              cic.lift cic.prop cic.prop
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_basics_lists_list.length
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      tl)
                                   x_1))
                             (Hind
                                (matita_basics_lists_list.append
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l3 l4)
                                (matita_basics_bool.andb_true_r
                                   (matita_basics_bool.notb
                                      (matita_basics_lists_listb.memb S a tl))
                                   (matita_basics_lists_listb.uniqueb S tl)
                                   unique)
                                (matita_basics_logic.eq_ind_r
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (matita_basics_lists_list.append
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      l3
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         a l4))
                                   (x :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    __ :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))))
                                           x
                                           (matita_basics_lists_list.append
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))
                                              l3
                                              (matita_basics_lists_list.cons
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))
                                                 a l4))) =>
                                    cic.lift cic.prop cic.prop
                                      (cic.prod cic.prop cic.prop
                                         ((S1 :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           _l1 :
                                             cic.Term (cic.type cic.z)
                                               (matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        S1))) =>
                                           _l2 :
                                             cic.Term (cic.type cic.z)
                                               (matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        S1))) =>
                                           matita_basics_lists_listb.sublist
                                             S1 _l1 _l2)
                                            S
                                            (matita_basics_lists_list.cons
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               a tl)
                                            x)
                                         (__1 :
                                            cic.Term cic.prop
                                              ((S1 :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                _l1 :
                                                  cic.Term (cic.type cic.z)
                                                    (matita_basics_lists_list.list
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (matita_basics_deqsets.carr
                                                             S1))) =>
                                                _l2 :
                                                  cic.Term (cic.type cic.z)
                                                    (matita_basics_lists_list.list
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          (matita_basics_deqsets.carr
                                                             S1))) =>
                                                matita_basics_lists_listb.sublist
                                                  S1 _l1 _l2)
                                                 S
                                                 (matita_basics_lists_list.cons
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          S))
                                                    a tl)
                                                 x) =>
                                          (S1 :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           _l1 :
                                             cic.Term (cic.type cic.z)
                                               (matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        S1))) =>
                                           _l2 :
                                             cic.Term (cic.type cic.z)
                                               (matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     (matita_basics_deqsets.carr
                                                        S1))) =>
                                           matita_basics_lists_listb.sublist
                                             S1 _l1 _l2)
                                            S tl
                                            (matita_basics_lists_list.append
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               l3 l4))))
                                   (sub0 :
                                      cic.Term cic.prop
                                        ((S1 :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          _l1 :
                                            cic.Term (cic.type cic.z)
                                              (matita_basics_lists_list.list
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (matita_basics_deqsets.carr
                                                       S1))) =>
                                          _l2 :
                                            cic.Term (cic.type cic.z)
                                              (matita_basics_lists_list.list
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    (matita_basics_deqsets.carr
                                                       S1))) =>
                                          matita_basics_lists_listb.sublist
                                            S1 _l1 _l2)
                                           S
                                           (matita_basics_lists_list.cons
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))
                                              a tl)
                                           (matita_basics_lists_list.append
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))
                                              l3
                                              (matita_basics_lists_list.cons
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))
                                                 a l4))) =>
                                    x :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    membx :
                                      cic.Term cic.prop
                                        ((A :
                                            cic.Univ
                                              (cic.type (cic.s (cic.s cic.z))) =>
                                          _x :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          __ :
                                            cic.Term
                                              (cic.type (cic.s (cic.s cic.z)))
                                              A =>
                                          matita_basics_logic.eq
                                            (cic.lift
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A)
                                            _x __)
                                           (cic.lift (cic.type cic.z)
                                              (cic.type (cic.s (cic.s cic.z)))
                                              matita_basics_bool.bool)
                                           (matita_basics_lists_listb.memb S
                                              x tl)
                                           matita_basics_bool.true) =>
                                    matita_basics_logic.match_Or cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb S x
                                            l3)
                                         matita_basics_bool.true)
                                      (matita_basics_logic.eq
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb S x
                                            (matita_basics_lists_list.cons
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  (matita_basics_deqsets.carr
                                                     S))
                                               a l4))
                                         matita_basics_bool.true)
                                      (__ :
                                         cic.Term cic.prop
                                           ((_A : cic.Univ cic.prop =>
                                             _B : cic.Univ cic.prop =>
                                             matita_basics_logic.Or _A _B)
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_lists_listb.memb
                                                    S x l3)
                                                 matita_basics_bool.true)
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_lists_listb.memb
                                                    S x
                                                    (matita_basics_lists_list.cons
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type cic.z)
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             S))
                                                       a l4))
                                                 matita_basics_bool.true)) =>
                                       (A :
                                          cic.Univ
                                            (cic.type (cic.s (cic.s cic.z))) =>
                                        _x :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        __1 :
                                          cic.Term
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A =>
                                        matita_basics_logic.eq
                                          (cic.lift
                                             (cic.type (cic.s (cic.s cic.z)))
                                             (cic.type (cic.s (cic.s cic.z)))
                                             A)
                                          _x __1)
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         (matita_basics_lists_listb.memb S x
                                            (matita_basics_lists_list.append
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               l3 l4))
                                         matita_basics_bool.true)
                                      (membxl3 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (matita_basics_lists_listb.memb
                                                 S x l3)
                                              matita_basics_bool.true) =>
                                       matita_basics_lists_listb.memb_append_l1
                                         S x l3 l4
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            matita_basics_bool.true
                                            (x0 :
                                               cic.Term (cic.type cic.z)
                                                 matita_basics_bool.bool =>
                                             cic.lift cic.prop
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  x0 matita_basics_bool.true))
                                            (matita_basics_logic.refl
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               matita_basics_bool.true)
                                            (matita_basics_lists_listb.memb S
                                               x l3)
                                            membxl3))
                                      (membxal4 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              (matita_basics_lists_listb.memb
                                                 S x
                                                 (matita_basics_lists_list.cons
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z)
                                                       ((_xxx :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s cic.z))
                                                             matita_basics_deqsets.DeqSet =>
                                                         matita_basics_deqsets.carr
                                                           _xxx)
                                                          S))
                                                    a l4))
                                              matita_basics_bool.true) =>
                                       matita_basics_logic.match_Or cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (matita_basics_deqsets.eqb S x a)
                                            matita_basics_bool.true)
                                         (matita_basics_logic.eq
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (matita_basics_lists_listb.memb S
                                               x l4)
                                            matita_basics_bool.true)
                                         (__ :
                                            cic.Term cic.prop
                                              ((_A : cic.Univ cic.prop =>
                                                _B : cic.Univ cic.prop =>
                                                matita_basics_logic.Or _A _B)
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (matita_basics_deqsets.eqb
                                                       S x a)
                                                    matita_basics_bool.true)
                                                 ((A :
                                                     cic.Univ
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z))) =>
                                                   _x :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   __ :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       A =>
                                                   matita_basics_logic.eq
                                                     (cic.lift
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A)
                                                     _x __)
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type
                                                          (cic.s
                                                             (cic.s cic.z)))
                                                       matita_basics_bool.bool)
                                                    (matita_basics_lists_listb.memb
                                                       S x l4)
                                                    matita_basics_bool.true)) =>
                                          (A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __1 :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __1)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            (matita_basics_lists_listb.memb S
                                               x
                                               (matita_basics_lists_list.append
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z)
                                                     ((_xxx :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s cic.z))
                                                           matita_basics_deqsets.DeqSet =>
                                                       matita_basics_deqsets.carr
                                                         _xxx)
                                                        S))
                                                  l3 l4))
                                            matita_basics_bool.true)
                                         (eqxa :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_deqsets.eqb S
                                                    x a)
                                                 matita_basics_bool.true) =>
                                          matita_basics_logic.False_ind
                                            (_x_66 :
                                               cic.Term cic.prop
                                                 matita_basics_logic.False =>
                                             cic.lift cic.prop cic.prop
                                               ((A :
                                                   cic.Univ
                                                     (cic.type
                                                        (cic.s (cic.s cic.z))) =>
                                                 _x :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 __ :
                                                   cic.Term
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      (cic.type
                                                         (cic.s (cic.s cic.z)))
                                                      A)
                                                   _x __)
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  (matita_basics_lists_listb.memb
                                                     S x
                                                     (matita_basics_lists_list.append
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type cic.z)
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              S))
                                                        l3 l4))
                                                  matita_basics_bool.true))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               x
                                               (x_1 :
                                                  cic.Term (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S) =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    ((A :
                                                        cic.Univ
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z))) =>
                                                      _x :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      __ :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          A =>
                                                      matita_basics_logic.eq
                                                        (cic.lift
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A)
                                                        _x __)
                                                       (cic.lift
                                                          (cic.type cic.z)
                                                          (cic.type
                                                             (cic.s
                                                                (cic.s cic.z)))
                                                          ((_xxx :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    cic.z))
                                                                matita_basics_deqsets.DeqSet =>
                                                            matita_basics_deqsets.carr
                                                              _xxx)
                                                             S))
                                                       x x_1) =>
                                                cic.lift cic.prop cic.prop
                                                  (cic.prod cic.prop cic.prop
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __ :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_bool.notb
                                                           (matita_basics_lists_listb.memb
                                                              S x_1 tl))
                                                        matita_basics_bool.true)
                                                     (__ :
                                                        cic.Term cic.prop
                                                          ((A :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            __ :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A)
                                                              _x __)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                matita_basics_bool.bool)
                                                             (matita_basics_bool.notb
                                                                (matita_basics_lists_listb.memb
                                                                   S x_1 tl))
                                                             matita_basics_bool.true) =>
                                                      matita_basics_logic.False)))
                                               (matita_basics_logic.eq_ind_r
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  matita_basics_bool.true
                                                  (x0 :
                                                     cic.Term
                                                       (cic.type cic.z)
                                                       matita_basics_bool.bool =>
                                                   __ :
                                                     cic.Term cic.prop
                                                       ((A :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A)
                                                           _x __)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             matita_basics_bool.bool)
                                                          x0
                                                          matita_basics_bool.true) =>
                                                   cic.lift cic.prop cic.prop
                                                     (cic.prod cic.prop
                                                        cic.prop
                                                        ((A :
                                                            cic.Univ
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                          _x :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          __1 :
                                                            cic.Term
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               (cic.type
                                                                  (cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                               A)
                                                            _x __1)
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              matita_basics_bool.bool)
                                                           (matita_basics_bool.notb
                                                              x0)
                                                           matita_basics_bool.true)
                                                        (__1 :
                                                           cic.Term cic.prop
                                                             ((A :
                                                                 cic.Univ
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                               _x :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A =>
                                                               __1 :
                                                                 cic.Term
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   A =>
                                                               matita_basics_logic.eq
                                                                 (cic.lift
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    (
                                                                  cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                    A)
                                                                 _x __1)
                                                                (cic.lift
                                                                   (cic.type
                                                                    cic.z)
                                                                   (cic.type
                                                                    (
                                                                    cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                   matita_basics_bool.bool)
                                                                (matita_basics_bool.notb
                                                                   x0)
                                                                matita_basics_bool.true) =>
                                                         matita_basics_logic.False)))
                                                  (auto :
                                                     cic.Term cic.prop
                                                       ((A :
                                                           cic.Univ
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z))) =>
                                                         _x :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         __ :
                                                           cic.Term
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             A =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              A)
                                                           _x __)
                                                          (cic.lift
                                                             (cic.type cic.z)
                                                             (cic.type
                                                                (cic.s
                                                                   (cic.s
                                                                    cic.z)))
                                                             matita_basics_bool.bool)
                                                          matita_basics_bool.false
                                                          matita_basics_bool.true) =>
                                                   matita_basics_logic.absurd
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __ :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        matita_basics_bool.true
                                                        matita_basics_bool.false)
                                                     (matita_basics_logic.rewrite_r
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        matita_basics_bool.true
                                                        (x0 :
                                                           cic.Term
                                                             (cic.type cic.z)
                                                             matita_basics_bool.bool =>
                                                         cic.lift cic.prop
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((A :
                                                               cic.Univ
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z))) =>
                                                             _x :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             __ :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  (cic.type
                                                                    (
                                                                   cic.s
                                                                    (
                                                                   cic.s
                                                                    cic.z)))
                                                                  A)
                                                               _x __)
                                                              (cic.lift
                                                                 (cic.type
                                                                    cic.z)
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 matita_basics_bool.bool)
                                                              matita_basics_bool.true
                                                              x0))
                                                        (matita_basics_logic.refl
                                                           (cic.lift
                                                              (cic.type cic.z)
                                                              (cic.type
                                                                 (cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                              matita_basics_bool.bool)
                                                           matita_basics_bool.true)
                                                        matita_basics_bool.false
                                                        auto)
                                                     matita_basics_bool.not_eq_true_false)
                                                  (matita_basics_lists_listb.memb
                                                     S x tl)
                                                  membx)
                                               a
                                               (matita_basics_logic.proj1
                                                  (cic.prod cic.prop cic.prop
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __ :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_deqsets.eqb
                                                           S x a)
                                                        matita_basics_bool.true)
                                                     (__ :
                                                        cic.Term cic.prop
                                                          ((A :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            __ :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A)
                                                              _x __)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                matita_basics_bool.bool)
                                                             (matita_basics_deqsets.eqb
                                                                S x a)
                                                             matita_basics_bool.true) =>
                                                      (A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __1)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              S))
                                                        x a))
                                                  (cic.prod cic.prop cic.prop
                                                     ((A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __ :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           ((_xxx :
                                                               cic.Term
                                                                 (cic.type
                                                                    (
                                                                  cic.s cic.z))
                                                                 matita_basics_deqsets.DeqSet =>
                                                             matita_basics_deqsets.carr
                                                               _xxx)
                                                              S))
                                                        x a)
                                                     (__ :
                                                        cic.Term cic.prop
                                                          ((A :
                                                              cic.Univ
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z))) =>
                                                            _x :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            __ :
                                                              cic.Term
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                A =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 (cic.type
                                                                    (
                                                                  cic.s
                                                                    (
                                                                  cic.s cic.z)))
                                                                 A)
                                                              _x __)
                                                             (cic.lift
                                                                (cic.type
                                                                   cic.z)
                                                                (cic.type
                                                                   (cic.s
                                                                    (
                                                                    cic.s
                                                                    cic.z)))
                                                                ((_xxx :
                                                                    cic.Term
                                                                    (
                                                                    cic.type
                                                                    (
                                                                    cic.s
                                                                    cic.z))
                                                                    matita_basics_deqsets.DeqSet =>
                                                                  matita_basics_deqsets.carr
                                                                    _xxx)
                                                                   S))
                                                             x a) =>
                                                      (A :
                                                         cic.Univ
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z))) =>
                                                       _x :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       __1 :
                                                         cic.Term
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           A =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            (cic.type
                                                               (cic.s
                                                                  (cic.s
                                                                    cic.z)))
                                                            A)
                                                         _x __1)
                                                        (cic.lift
                                                           (cic.type cic.z)
                                                           (cic.type
                                                              (cic.s
                                                                 (cic.s cic.z)))
                                                           matita_basics_bool.bool)
                                                        (matita_basics_deqsets.eqb
                                                           S x a)
                                                        matita_basics_bool.true))
                                                  (matita_basics_deqsets.eqb_true
                                                     S x a)
                                                  eqxa)
                                               (matita_basics_bool.andb_true_l
                                                  (matita_basics_bool.notb
                                                     (matita_basics_lists_listb.memb
                                                        S a tl))
                                                  (matita_basics_lists_listb.uniqueb
                                                     S tl)
                                                  unique)))
                                         (membxl4 :
                                            cic.Term cic.prop
                                              ((A :
                                                  cic.Univ
                                                    (cic.type
                                                       (cic.s (cic.s cic.z))) =>
                                                _x :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                __ :
                                                  cic.Term
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    A =>
                                                matita_basics_logic.eq
                                                  (cic.lift
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     A)
                                                  _x __)
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type
                                                       (cic.s (cic.s cic.z)))
                                                    matita_basics_bool.bool)
                                                 (matita_basics_lists_listb.memb
                                                    S x l4)
                                                 matita_basics_bool.true) =>
                                          matita_basics_lists_listb.memb_append_l2
                                            S x l3 l4
                                            (matita_basics_logic.rewrite_r
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  matita_basics_bool.bool)
                                               matita_basics_bool.true
                                               (x0 :
                                                  cic.Term (cic.type cic.z)
                                                    matita_basics_bool.bool =>
                                                cic.lift cic.prop
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  ((A :
                                                      cic.Univ
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z))) =>
                                                    _x :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    __ :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        A =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         (cic.type
                                                            (cic.s
                                                               (cic.s cic.z)))
                                                         A)
                                                      _x __)
                                                     (cic.lift
                                                        (cic.type cic.z)
                                                        (cic.type
                                                           (cic.s
                                                              (cic.s cic.z)))
                                                        matita_basics_bool.bool)
                                                     x0
                                                     matita_basics_bool.true))
                                               (matita_basics_logic.refl
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type
                                                        (cic.s (cic.s cic.z)))
                                                     matita_basics_bool.bool)
                                                  matita_basics_bool.true)
                                               (matita_basics_lists_listb.memb
                                                  S x l4)
                                               membxl4))
                                         (matita_basics_bool.orb_true_l
                                            (matita_basics_deqsets.eqb S x a)
                                            (matita_basics_lists_listb.memb S
                                               x l4)
                                            membxal4))
                                      (matita_basics_lists_listb.memb_append
                                         S x l3
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            a l4)
                                         (sub0 x
                                            (matita_basics_bool.orb_true_r2
                                               (matita_basics_deqsets.eqb S x
                                                  a)
                                               (matita_basics_lists_listb.memb
                                                  S x tl)
                                               membx))))
                                   l2 eql2 sub))
                             (matita_arithmetics_nat.plus
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l3)
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l4))
                             (matita_basics_lists_list.length_append
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l3 l4)))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l3)
                             (matita_arithmetics_nat.S
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l4)))
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_arithmetics_nat.nat =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type (cic.s cic.z))
                                   (cic.type (cic.s (cic.s cic.z)))
                                   (cic.univ (cic.type cic.z)))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S
                                         (matita_basics_lists_list.length
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            tl))
                                      x))
                                (cic.lift cic.prop (cic.type cic.z)
                                   ((_n :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     __ :
                                       cic.Term (cic.type cic.z)
                                         matita_arithmetics_nat.nat =>
                                     matita_arithmetics_nat.le _n __)
                                      (matita_arithmetics_nat.S
                                         (matita_basics_lists_list.length
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            tl))
                                      (matita_arithmetics_nat.plus
                                         (matita_basics_lists_list.length
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            l3)
                                         (matita_arithmetics_nat.S
                                            (matita_basics_lists_list.length
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               l4)))))))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type (cic.s cic.z))
                                (cic.type (cic.s (cic.s cic.z)))
                                (cic.univ (cic.type cic.z)))
                             (cic.lift cic.prop (cic.type cic.z)
                                ((_n :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  __ :
                                    cic.Term (cic.type cic.z)
                                      matita_arithmetics_nat.nat =>
                                  matita_arithmetics_nat.le _n __)
                                   (matita_arithmetics_nat.S
                                      (matita_basics_lists_list.length
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         tl))
                                   (matita_arithmetics_nat.plus
                                      (matita_basics_lists_list.length
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         l3)
                                      (matita_arithmetics_nat.S
                                         (matita_basics_lists_list.length
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            l4))))))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l3)
                                (matita_basics_lists_list.length
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   l4)))
                          (matita_arithmetics_nat.plus_n_Sm
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l3)
                             (matita_basics_lists_list.length
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                l4))))
                    (matita_basics_lists_list.length
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       (matita_basics_lists_list.append
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          l3
                          (matita_basics_lists_list.cons
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a l4)))
                    (matita_basics_lists_list.length_append
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       l3
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a l4)))
                 l2 eql2)
              _clearme)
           (matita_basics_lists_listb.memb_exists S a l2
              (sub a
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          x matita_basics_bool.true))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl))
                    (matita_basics_lists_listb.memb_hd S a tl)))))
        l1.

def sublist_unique_append_l1 :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  (S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S l1
                    (matita_basics_lists_listb.unique_append S l1 l2)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               (S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S _x_716
                 (matita_basics_lists_listb.unique_append S _x_716 l2))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         S0 :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         abs :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S S0 l2)
                 matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false))
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 cic.prod (cic.type cic.z) cic.prop
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S)
                   (a :
                      cic.Term (cic.type cic.z)
                        ((_xxx :
                            cic.Term (cic.type (cic.s cic.z))
                              matita_basics_deqsets.DeqSet =>
                          matita_basics_deqsets.carr _xxx) S) =>
                    cic.prod cic.prop cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a tl)
                         matita_basics_bool.true)
                      (__ :
                         cic.Term cic.prop
                           ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                             _x :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             __ :
                               cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                             matita_basics_logic.eq
                               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                  (cic.type (cic.s (cic.s cic.z))) A)
                               _x __)
                              (cic.lift (cic.type cic.z)
                                 (cic.type (cic.s (cic.s cic.z)))
                                 matita_basics_bool.bool)
                              (matita_basics_lists_listb.memb S a tl)
                              matita_basics_bool.true) =>
                       (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a
                            (matita_basics_lists_listb.unique_append S tl l2))
                         matita_basics_bool.true)))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a x) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S a x) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a x)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S a x)
                      matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl)
                    (matita_basics_deqsets.eqb S a x))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_basics_bool.bool)
                         matita_basics_bool.true
                         (matita_basics_lists_listb.memb S a tl)
                         (matita_basics_deqsets.eqb S a x))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))
                       (matita_basics_lists_listb.unique_append S tl l2)
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          x (matita_basics_lists_listb.unique_append S tl l2))
                       (matita_basics_lists_listb.memb S x
                          (matita_basics_lists_listb.unique_append S tl l2))))
                 matita_basics_bool.true))
           (eqax :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a x) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x0 matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S a tl) x0)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S a tl) x0)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             (matita_basics_lists_listb.memb S x
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))))
                       matita_basics_bool.true)))
              (matita_basics_logic.eq_ind
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 a
                 (x_1 :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  _x_2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         a x_1) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S a tl)
                             matita_basics_bool.true)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  (matita_basics_lists_listb.memb S a tl)
                                  matita_basics_bool.true)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_listb.unique_append S tl
                                   l2)
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   x_1
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))
                                (matita_basics_lists_listb.memb S x_1
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))))
                          matita_basics_bool.true)))
                 (matita_basics_logic.match_Or cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))
                       matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))
                       matita_basics_bool.false)
                    (__ :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.Or _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_listb.unique_append S
                                     tl l2))
                               matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_listb.unique_append S
                                     tl l2))
                               matita_basics_bool.false)) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S a tl)
                             matita_basics_bool.true)
                          matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  (matita_basics_lists_listb.memb S a tl)
                                  matita_basics_bool.true)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_listb.unique_append S tl
                                   l2)
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))))
                          matita_basics_bool.true))
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))
                            matita_basics_bool.true) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               x0 matita_basics_bool.true) =>
                        cic.lift cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   (matita_basics_lists_listb.memb S a tl)
                                   matita_basics_bool.true)
                                matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0 :
                                           cic.Term (cic.type cic.z)
                                             matita_basics_bool.bool =>
                                         matita_basics_bool.bool)
                                        matita_basics_bool.true
                                        (matita_basics_lists_listb.memb S a
                                           tl)
                                        matita_basics_bool.true)
                                     matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_listb.unique_append
                                         S tl l2)
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         a
                                         (matita_basics_lists_listb.unique_append
                                            S tl l2))
                                      x0))
                                matita_basics_bool.true)))
                       (auto :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               matita_basics_bool.true
                               matita_basics_bool.true) =>
                        matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x0 matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_listb.unique_append S tl l2))
                          H)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))
                       H)
                    (H :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_lists_listb.unique_append S tl
                                  l2))
                            matita_basics_bool.false) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               x0 matita_basics_bool.false) =>
                        cic.lift cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   (matita_basics_lists_listb.memb S a tl)
                                   matita_basics_bool.true)
                                matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0 :
                                           cic.Term (cic.type cic.z)
                                             matita_basics_bool.bool =>
                                         matita_basics_bool.bool)
                                        matita_basics_bool.true
                                        (matita_basics_lists_listb.memb S a
                                           tl)
                                        matita_basics_bool.true)
                                     matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_listb.unique_append
                                         S tl l2)
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         a
                                         (matita_basics_lists_listb.unique_append
                                            S tl l2))
                                      x0))
                                matita_basics_bool.true)))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  x0 matita_basics_bool.true) =>
                           cic.lift cic.prop cic.prop
                             (cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   matita_basics_bool.true)
                                (__1 :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __1 :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __1)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        matita_basics_bool.true
                                        matita_basics_bool.true) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __2 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __2)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       matita_basics_bool.bool)
                                      matita_basics_bool.true
                                      (matita_basics_lists_listb.memb S a
                                         (matita_basics_lists_listb.unique_append
                                            S tl l2))
                                      x0)
                                   matita_basics_bool.true)))
                          (auto :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __ :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  matita_basics_bool.true) =>
                           matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb S a a)
                          (matita_basics_logic.proj2
                             (cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_deqsets.eqb S a a)
                                   matita_basics_bool.true)
                                (__ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           matita_basics_bool.bool)
                                        (matita_basics_deqsets.eqb S a a)
                                        matita_basics_bool.true) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a a))
                             (cic.prod cic.prop cic.prop
                                ((A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __ :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   a a)
                                (__ :
                                   cic.Term cic.prop
                                     ((A :
                                         cic.Univ
                                           (cic.type (cic.s (cic.s cic.z))) =>
                                       _x :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       __ :
                                         cic.Term
                                           (cic.type (cic.s (cic.s cic.z))) A =>
                                       matita_basics_logic.eq
                                         (cic.lift
                                            (cic.type (cic.s (cic.s cic.z)))
                                            (cic.type (cic.s (cic.s cic.z)))
                                            A)
                                         _x __)
                                        (cic.lift (cic.type cic.z)
                                           (cic.type (cic.s (cic.s cic.z)))
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        a a) =>
                                 (A :
                                    cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                  _x :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  __1 :
                                    cic.Term (cic.type (cic.s (cic.s cic.z)))
                                      A =>
                                  matita_basics_logic.eq
                                    (cic.lift
                                       (cic.type (cic.s (cic.s cic.z)))
                                       (cic.type (cic.s (cic.s cic.z))) A)
                                    _x __1)
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_deqsets.eqb S a a)
                                   matita_basics_bool.true))
                             (matita_basics_deqsets.eqb_true S a a)
                             (matita_basics_logic.refl
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                a)))
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))
                       H)
                    (matita_basics_bool.true_or_false
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))))
                 x
                 (matita_basics_logic.proj1
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a x)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S a x)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a x))
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a x)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a x) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S a x)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true S a x) eqax))
              (matita_basics_deqsets.eqb S a x) eqax)
           (eqax :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S a x) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x0 matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S a tl) x0)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S a tl) x0)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             (matita_basics_lists_listb.memb S x
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))))
                       matita_basics_bool.true)))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S a tl)
                          matita_basics_bool.false)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S a tl)
                               matita_basics_bool.false)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_listb.unique_append S tl l2)
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x
                                (matita_basics_lists_listb.unique_append S tl
                                   l2))
                             __))
                       matita_basics_bool.true))
                 (auto :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a tl)
                         matita_basics_bool.true) =>
                  Hind l2 a
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x0 matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.memb S a tl) auto))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x0 matita_basics_bool.false) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S a tl)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb S a tl)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_listb.unique_append S
                                      tl l2))
                                x0)
                             matita_basics_bool.true)))
                    (auto :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a tl)
                            matita_basics_bool.true) =>
                     Hind l2 a
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x0 matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.memb S a tl) auto))
                    (matita_basics_deqsets.eqb S a x) eqax)
                 (matita_basics_lists_listb.memb S x
                    (matita_basics_lists_listb.unique_append S tl l2)))
              (matita_basics_deqsets.eqb S a x) eqax)
           (matita_basics_bool.true_or_false
              (matita_basics_deqsets.eqb S a x)))
        l1.

def sublist_unique_append_l2 :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  (S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S l2
                    (matita_basics_lists_listb.unique_append S l1 l2)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l2 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               (S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S l2
                 (matita_basics_lists_listb.unique_append S _x_716 l2))))
        (l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.memb S a l2)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_basics_lists_listb.memb S a l2) auto)
        (x :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod (cic.type cic.z) cic.prop
                ((_A : cic.Univ (cic.type cic.z) =>
                  matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)))
                (l2 :
                   cic.Term (cic.type cic.z)
                     ((_A : cic.Univ (cic.type cic.z) =>
                       matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                        (cic.lift (cic.type cic.z) (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S))) =>
                 (S1 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  _l1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  _l2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  matita_basics_lists_listb.sublist S1 _l1 _l2) S l2
                   (matita_basics_lists_listb.unique_append S tl l2))) =>
         l2 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a l2)
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))
                       (matita_basics_lists_listb.unique_append S tl l2)
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          x (matita_basics_lists_listb.unique_append S tl l2))
                       __))
                 matita_basics_bool.true))
           (Hind l2 a)
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_listb.unique_append S tl l2))
                       __)
                    matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (Hind l2 a) (matita_basics_deqsets.eqb S a x))
           (matita_basics_lists_listb.memb S x
              (matita_basics_lists_listb.unique_append S tl l2)))
        l1.

def decidable_sublist :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l1 :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l2 :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  (_A : cic.Univ cic.prop =>
                   _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S l1 l2)
                    ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                       ((S1 :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         _l1 :
                           cic.Term (cic.type cic.z)
                             (matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S1))) =>
                         _l2 :
                           cic.Term (cic.type cic.z)
                             (matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   (matita_basics_deqsets.carr S1))) =>
                         matita_basics_lists_listb.sublist S1 _l1 _l2) S l1
                          l2))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l1 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      l2 :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           ((_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S _x_716 l2)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S _x_716 l2))))
        (matita_basics_logic.or_introl
           ((S1 :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             _l1 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr S1))) =>
             _l2 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr S1))) =>
             matita_basics_lists_listb.sublist S1 _l1 _l2) S
              (matita_basics_lists_list.nil
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              l2)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 l2))
           (a :
              cic.Term (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S) =>
            abs :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   matita_basics_bool.false matita_basics_bool.true) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               cic.lift cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a l2)
                    matita_basics_bool.true))
              (matita_basics_logic.absurd
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true matita_basics_bool.false)
                 (matita_basics_logic.rewrite_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true x))
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true)
                    matita_basics_bool.false abs)
                 matita_basics_bool.not_eq_true_false)))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         _clearme :
           cic.Term cic.prop
             ((_A : cic.Univ cic.prop =>
               _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                ((S1 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  _l1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  _l2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((S1 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     _l1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     _l2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2))) =>
         matita_basics_logic.match_Or cic.prop
           ((S1 :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             _l1 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr S1))) =>
             _l2 :
               cic.Term (cic.type cic.z)
                 (matita_basics_lists_list.list
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       (matita_basics_deqsets.carr S1))) =>
             matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)
           ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
              ((S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2))
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((S1 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     _l1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     _l2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)
                   ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                      ((S1 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        _l1 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        _l2 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2))) =>
            (_A : cic.Univ cic.prop =>
             _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
              ((S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a tl)
                 l2)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2)))
           (subtl :
              cic.Term cic.prop
                ((S1 :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  _l1 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  _l2 :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            (matita_basics_deqsets.carr S1))) =>
                  matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2) =>
            matita_basics_logic.match_Or cic.prop
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a l2)
                 matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a l2)
                 matita_basics_bool.false)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a l2)
                         matita_basics_bool.false)) =>
               (_A : cic.Univ cic.prop =>
                _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl)
                       l2)))
              (memba :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.true) =>
               matita_basics_logic.or_introl
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl)
                       l2))
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  membx :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S x
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a tl))
                         matita_basics_bool.true) =>
                  matita_basics_logic.match_Or cic.prop
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S x a)
                       matita_basics_bool.true)
                    (matita_basics_logic.eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S x tl)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((_A : cic.Univ cic.prop =>
                           _B : cic.Univ cic.prop =>
                           matita_basics_logic.Or _A _B)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S x a)
                               matita_basics_bool.true)
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S x tl)
                               matita_basics_bool.true)) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S x l2)
                       matita_basics_bool.true)
                    (eqax :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S x a)
                            matita_basics_bool.true) =>
                     matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a
                       (x0 :
                          cic.Term (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S) =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               x0 a) =>
                        cic.lift cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x0 l2)
                             matita_basics_bool.true))
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x0 matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.memb S a l2) memba)
                       x
                       (matita_basics_logic.proj1
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb S x a)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb S x a)
                                     matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x a))
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x a)
                             (__ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     x a) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb S x a)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true S x a) eqax))
                    (subtl x)
                    (matita_basics_bool.orb_true_l
                       (matita_basics_deqsets.eqb S x a)
                       (matita_basics_lists_listb.memb S x tl) membx)))
              (memba :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a l2)
                      matita_basics_bool.false) =>
               matita_basics_logic.or_intror
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2)
                 ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl)
                       l2))
                 (matita_basics_logic.not_to_not
                    ((S1 :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      _l1 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      _l2 :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                (matita_basics_deqsets.carr S1))) =>
                      matita_basics_lists_listb.sublist S1 _l1 _l2) S
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl)
                       l2)
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a l2)
                       matita_basics_bool.true)
                    (H1 :
                       cic.Term cic.prop
                         ((S1 :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           _l1 :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     (matita_basics_deqsets.carr S1))) =>
                           _l2 :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     (matita_basics_deqsets.carr S1))) =>
                           matita_basics_lists_listb.sublist S1 _l1 _l2) S
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               a tl)
                            l2) =>
                     H1 a (matita_basics_lists_listb.memb_hd S a tl))
                    (matita_basics_bool.eqnot_to_noteq
                       (matita_basics_lists_listb.memb S a l2)
                       matita_basics_bool.true memba)))
              (matita_basics_bool.true_or_false
                 (matita_basics_lists_listb.memb S a l2)))
           (subtl :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                   ((S1 :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     _l1 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     _l2 :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               (matita_basics_deqsets.carr S1))) =>
                     matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)) =>
            matita_basics_logic.or_intror
              ((S1 :
                  cic.Term (cic.type (cic.s cic.z))
                    matita_basics_deqsets.DeqSet =>
                _l1 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                _l2 :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          (matita_basics_deqsets.carr S1))) =>
                matita_basics_lists_listb.sublist S1 _l1 _l2) S
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a tl)
                 l2)
              ((_A : cic.Univ cic.prop => matita_basics_logic.Not _A)
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2))
              (matita_basics_logic.not_to_not
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)
                    l2)
                 ((S1 :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   _l1 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   _l2 :
                     cic.Term (cic.type cic.z)
                       (matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             (matita_basics_deqsets.carr S1))) =>
                   matita_basics_lists_listb.sublist S1 _l1 _l2) S tl l2)
                 (H1 :
                    cic.Term cic.prop
                      ((S1 :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        _l1 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        _l2 :
                          cic.Term (cic.type cic.z)
                            (matita_basics_lists_list.list
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  (matita_basics_deqsets.carr S1))) =>
                        matita_basics_lists_listb.sublist S1 _l1 _l2) S
                         (matita_basics_lists_list.cons
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a tl)
                         l2) =>
                  x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  H2 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S x tl)
                         matita_basics_bool.true) =>
                  H1 x
                    (matita_basics_lists_listb.memb_cons S x a tl
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x0 matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.memb S x tl) H2)))
                 subtl))
           _clearme)
        l1.

def memb_filter_memb :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  matita_basics_bool.bool))
              (f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S) =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (a :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.filter
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                f l))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_list.filter
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     f l))
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a l)
                          matita_basics_bool.true))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              matita_basics_bool.bool)) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f _x_716))
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.filter
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            f _x_716))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a _x_716)
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_list.filter
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         f tl))
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S a
                           (matita_basics_lists_list.filter
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S))
                              f tl))
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a tl)
                   matita_basics_bool.true)) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b
                          (matita_basics_lists_list.foldr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S) =>
                              l0 :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))) =>
                              matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   x l0)
                                l0 (f x))
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             tl))
                       (matita_basics_lists_list.foldr
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S) =>
                           l0 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x l0)
                             l0 (f x))
                          (matita_basics_lists_list.nil
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          tl)
                       __))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             (_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)))
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               b
                               (matita_basics_lists_list.foldr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))))
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S) =>
                                   l0 :
                                     cic.Term (cic.type cic.z)
                                       ((_A : cic.Univ (cic.type cic.z) =>
                                         matita_basics_lists_list.list
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) _A))
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                S))) =>
                                   matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      (_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     (matita_basics_lists_list.cons
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        x l0)
                                     l0 (f x))
                                  (matita_basics_lists_list.nil
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  tl))
                            (matita_basics_lists_list.foldr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))))
                               (x :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S) =>
                                l0 :
                                  cic.Term (cic.type cic.z)
                                    ((_A : cic.Univ (cic.type cic.z) =>
                                      matita_basics_lists_list.list
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) _A))
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             S))) =>
                                matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     x l0)
                                  l0 (f x))
                               (matita_basics_lists_list.nil
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S)))
                               tl)
                            __))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S a tl)
                    (matita_basics_deqsets.eqb S a b))
                 matita_basics_bool.true))
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_list.foldr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (x :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S) =>
                              l0 :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))) =>
                              matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   x l0)
                                l0 (f x))
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             tl))
                       __)
                    matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             matita_basics_bool.bool)
                            matita_basics_bool.true
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_lists_list.foldr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))))
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S) =>
                                   l0 :
                                     cic.Term (cic.type cic.z)
                                       ((_A : cic.Univ (cic.type cic.z) =>
                                         matita_basics_lists_list.list
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) _A))
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                S))) =>
                                   matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      (_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     (matita_basics_lists_list.cons
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        x l0)
                                     l0 (f x))
                                  (matita_basics_lists_list.nil
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  tl))
                            __)
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a tl) __)
                    matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      matita_basics_bool.true matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              Hind (matita_basics_deqsets.eqb S a b))
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.prod cic.prop cic.prop
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __1)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_lists_listb.memb S a
                       (matita_basics_lists_list.foldr
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (x :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S) =>
                           l0 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x l0)
                             l0 (f x))
                          (matita_basics_lists_list.nil
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          tl))
                    matita_basics_bool.true)
                 (__1 :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __1)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_lists_listb.memb S a
                            (matita_basics_lists_list.foldr
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))))
                               (x :
                                  cic.Term (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S) =>
                                l0 :
                                  cic.Term (cic.type cic.z)
                                    ((_A : cic.Univ (cic.type cic.z) =>
                                      matita_basics_lists_list.list
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z) _A))
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             S))) =>
                                matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     x l0)
                                  l0 (f x))
                               (matita_basics_lists_list.nil
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S)))
                               tl))
                         matita_basics_bool.true) =>
                  (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __2)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_lists_listb.memb S a tl) __)
                    matita_basics_bool.true))
              (auto :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.foldr
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))))
                            (x :
                               cic.Term (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S) =>
                             l0 :
                               cic.Term (cic.type cic.z)
                                 ((_A : cic.Univ (cic.type cic.z) =>
                                   matita_basics_lists_list.list
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z) _A))
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S))) =>
                             matita_basics_bool.match_bool (cic.type cic.z)
                               (__ :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                (_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S)))
                               (matita_basics_lists_list.cons
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  x l0)
                               l0 (f x))
                            (matita_basics_lists_list.nil
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)))
                            tl))
                      matita_basics_bool.true) =>
               matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              Hind (matita_basics_deqsets.eqb S a b))
           (f b))
        l.

def uniqueb_filter :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              ((_A : cic.Univ (cic.type cic.z) =>
                matita_basics_lists_list.list
                  (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)))
              (l :
                 cic.Term (cic.type cic.z)
                   ((_A : cic.Univ (cic.type cic.z) =>
                     matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))) =>
               cic.prod (cic.type cic.z) cic.prop
                 (cic.prod (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)
                    (__ :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S) =>
                     matita_basics_bool.bool))
                 (f :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S)
                         (__ :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S) =>
                          matita_basics_bool.bool)) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S l)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.uniqueb S l)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S
                          (matita_basics_lists_list.filter
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             f l))
                       matita_basics_bool.true)))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              matita_basics_bool.bool)) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb S _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb S _x_716)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb S
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f _x_716))
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S
                   (matita_basics_lists_list.nil
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))))
                matita_basics_bool.true) =>
         matita_basics_logic.refl
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.uniqueb S
              (matita_basics_lists_list.filter
                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S))
                 f
                 (matita_basics_lists_list.nil
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))))))
        (a :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb S tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.uniqueb S tl)
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb S
                      (matita_basics_lists_list.filter
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         f tl))
                   matita_basics_bool.true)) =>
         Hunique :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                (matita_basics_lists_listb.uniqueb S
                   (matita_basics_lists_list.cons
                      (cic.lift (cic.type cic.z) (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      a tl))
                matita_basics_bool.true) =>
         matita_basics_logic.match_And cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb S a tl))
              matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb S tl)
              matita_basics_bool.true)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.And _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.notb
                         (matita_basics_lists_listb.memb S a tl))
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.uniqueb S tl)
                      matita_basics_bool.true)) =>
            (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
             _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
             matita_basics_logic.eq
               (cic.lift (cic.type (cic.s (cic.s cic.z)))
                  (cic.type (cic.s (cic.s cic.z))) A)
               _x __1)
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_lists_listb.uniqueb S
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl)))
              matita_basics_bool.true)
           (memba :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_bool.notb
                      (matita_basics_lists_listb.memb S a tl))
                   matita_basics_bool.true) =>
            uniquetl :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.uniqueb S tl)
                   matita_basics_bool.true) =>
            matita_basics_logic.match_Or cic.prop
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f a) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f a) matita_basics_bool.false)
              (__ :
                 cic.Term cic.prop
                   ((_A : cic.Univ cic.prop =>
                     _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f a) matita_basics_bool.true)
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (f a) matita_basics_bool.false)) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.uniqueb S
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          a tl)))
                 matita_basics_bool.true)
              (Hfa :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f a) matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (matita_basics_lists_list.cons
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    a
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f tl))
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         x
                         (matita_basics_lists_list.cons
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            a
                            (matita_basics_lists_list.filter
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               f tl))) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S x)
                       matita_basics_bool.true))
                 (matita_basics_bool.true_to_andb_true
                    (matita_basics_bool.notb
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_lists_list.filter
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             f tl)))
                    (matita_basics_lists_listb.uniqueb S
                       (matita_basics_lists_list.filter
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          f tl))
                    (matita_basics_logic.sym_eq
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (matita_basics_bool.notb
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.filter
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                f tl)))
                       (matita_basics_bool.noteq_to_eqnot
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.filter
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                f tl))
                          (matita_basics_logic.not_to_not
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_list.filter
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      f tl)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a tl))
                             (H :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     (matita_basics_lists_listb.memb S a
                                        (matita_basics_lists_list.filter
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           f tl))) =>
                              matita_basics_logic.sym_eq
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_lists_listb.memb S a tl)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb_filter_memb S
                                   f a tl
                                   (matita_basics_logic.eq_ind
                                      (cic.lift (cic.type cic.z)
                                         (cic.type (cic.s (cic.s cic.z)))
                                         matita_basics_bool.bool)
                                      matita_basics_bool.true
                                      (x_1 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       _x_2 :
                                         cic.Term cic.prop
                                           ((A :
                                               cic.Univ
                                                 (cic.type
                                                    (cic.s (cic.s cic.z))) =>
                                             _x :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             __ :
                                               cic.Term
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 A =>
                                             matita_basics_logic.eq
                                               (cic.lift
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  (cic.type
                                                     (cic.s (cic.s cic.z)))
                                                  A)
                                               _x __)
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type
                                                    (cic.s (cic.s cic.z)))
                                                 matita_basics_bool.bool)
                                              matita_basics_bool.true x_1) =>
                                       cic.lift cic.prop cic.prop
                                         ((A :
                                             cic.Univ
                                               (cic.type
                                                  (cic.s (cic.s cic.z))) =>
                                           _x :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           __ :
                                             cic.Term
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               A =>
                                           matita_basics_logic.eq
                                             (cic.lift
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                (cic.type
                                                   (cic.s (cic.s cic.z)))
                                                A)
                                             _x __)
                                            (cic.lift (cic.type cic.z)
                                               (cic.type
                                                  (cic.s (cic.s cic.z)))
                                               matita_basics_bool.bool)
                                            x_1 matita_basics_bool.true))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.type cic.z)
                                            (cic.type (cic.s (cic.s cic.z)))
                                            matita_basics_bool.bool)
                                         matita_basics_bool.true)
                                      (matita_basics_lists_listb.memb S a
                                         (matita_basics_lists_list.filter
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            f tl))
                                      H)))
                             (matita_basics_bool.eqnot_to_noteq
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a tl)
                                (matita_basics_logic.sym_eq
                                   (cic.lift (cic.type cic.z)
                                      (cic.type (cic.s (cic.s cic.z)))
                                      matita_basics_bool.bool)
                                   (matita_basics_bool.notb
                                      (matita_basics_lists_listb.memb S a tl))
                                   matita_basics_bool.true memba)))))
                    (Hind
                       (matita_basics_logic.rewrite_r
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                x matita_basics_bool.true))
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             matita_basics_bool.true)
                          (matita_basics_lists_listb.uniqueb S tl) uniquetl)))
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl))
                 (matita_basics_lists_list.filter_true
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    tl a f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f a) Hfa)))
              (Hfa :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f a) matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))))
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f tl)
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         x
                         (matita_basics_lists_list.filter
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            f tl)) =>
                  cic.lift cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.uniqueb S x)
                       matita_basics_bool.true))
                 (Hind
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_lists_listb.uniqueb S tl) uniquetl))
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f
                    (matita_basics_lists_list.cons
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       a tl))
                 (matita_basics_lists_list.filter_false
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    tl a f
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __ :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.false))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.false)
                       (f a) Hfa)))
              (matita_basics_bool.true_or_false (f a)))
           (matita_basics_bool.andb_true
              (matita_basics_bool.notb
                 (matita_basics_lists_listb.memb S a tl))
              (matita_basics_lists_listb.uniqueb S tl) Hunique))
        l.

def filter_true :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  matita_basics_bool.bool))
              (f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S) =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (a :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.filter
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                f l))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_list.filter
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     f l))
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f a) matita_basics_bool.true))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              matita_basics_bool.bool)) =>
      a :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f _x_716))
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.filter
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            f _x_716))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f a) matita_basics_bool.true)))
        (H :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.lift cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f a) matita_basics_bool.true))
           (matita_basics_logic.absurd
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true x))
                 (matita_basics_logic.refl
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false H)
              matita_basics_bool.not_eq_true_false))
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S a
                      (matita_basics_lists_list.filter
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         f tl))
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S a
                           (matita_basics_lists_list.filter
                              (cic.lift (cic.type cic.z) (cic.type cic.z)
                                 ((_xxx :
                                     cic.Term (cic.type (cic.s cic.z))
                                       matita_basics_deqsets.DeqSet =>
                                   matita_basics_deqsets.carr _xxx) S))
                              f tl))
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f a) matita_basics_bool.true)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (f b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (f b) matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S a
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b tl)))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S a
                         (matita_basics_lists_list.filter
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            f
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               b tl)))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (f a) matita_basics_bool.true))
           (H :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x0 l0)
                                      l0 (f x0))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl))
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x0 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x0 l0)
                                   l0 (f x0))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl)
                             x))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     b
                                     (matita_basics_lists_list.foldr
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))))
                                        (x0 :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                S) =>
                                         l0 :
                                           cic.Term (cic.type cic.z)
                                             ((_A :
                                                 cic.Univ (cic.type cic.z) =>
                                               matita_basics_lists_list.list
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z) _A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      S))) =>
                                         matita_basics_bool.match_bool
                                           (cic.type cic.z)
                                           (_0 :
                                              cic.Term (cic.type cic.z)
                                                matita_basics_bool.bool =>
                                            (_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S)))
                                           (matita_basics_lists_list.cons
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))
                                              x0 l0)
                                           l0 (f x0))
                                        (matita_basics_lists_list.nil
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S)))
                                        tl))
                                  (matita_basics_lists_list.foldr
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))))
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             S) =>
                                      l0 :
                                        cic.Term (cic.type cic.z)
                                          ((_A : cic.Univ (cic.type cic.z) =>
                                            matita_basics_lists_list.list
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z) _A))
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   S))) =>
                                      matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0 :
                                           cic.Term (cic.type cic.z)
                                             matita_basics_bool.bool =>
                                         (_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S)))
                                        (matita_basics_lists_list.cons
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           x0 l0)
                                        l0 (f x0))
                                     (matita_basics_lists_list.nil
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     tl)
                                  x))
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f a) matita_basics_bool.true)))
              (matita_basics_logic.match_Or cic.prop
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b) matita_basics_bool.true)
                 (matita_basics_logic.eq
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    (matita_basics_deqsets.eqb S a b)
                    matita_basics_bool.false)
                 (__ :
                    cic.Term cic.prop
                      ((_A : cic.Univ cic.prop =>
                        _B : cic.Univ cic.prop =>
                        matita_basics_logic.Or _A _B)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S a b)
                            matita_basics_bool.true)
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S a b)
                            matita_basics_bool.false)) =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S a
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x l0)
                                   l0 (f x))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl))
                          (matita_basics_deqsets.eqb S a b))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S a
                                  (matita_basics_lists_list.foldr
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))))
                                     (x :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             S) =>
                                      l0 :
                                        cic.Term (cic.type cic.z)
                                          ((_A : cic.Univ (cic.type cic.z) =>
                                            matita_basics_lists_list.list
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z) _A))
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   S))) =>
                                      matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0 :
                                           cic.Term (cic.type cic.z)
                                             matita_basics_bool.bool =>
                                         (_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S)))
                                        (matita_basics_lists_list.cons
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           x l0)
                                        l0 (f x))
                                     (matita_basics_lists_list.nil
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     tl))
                               (matita_basics_deqsets.eqb S a b))
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f a) matita_basics_bool.true))
                 (eqab :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.true) =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             matita_basics_bool.bool)
                            matita_basics_bool.true
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_lists_list.foldr
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))))
                                  (x :
                                     cic.Term (cic.type cic.z)
                                       ((_xxx :
                                           cic.Term (cic.type (cic.s cic.z))
                                             matita_basics_deqsets.DeqSet =>
                                         matita_basics_deqsets.carr _xxx) S) =>
                                   l0 :
                                     cic.Term (cic.type cic.z)
                                       ((_A : cic.Univ (cic.type cic.z) =>
                                         matita_basics_lists_list.list
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z) _A))
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                S))) =>
                                   matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      (_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     (matita_basics_lists_list.cons
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        x l0)
                                     l0 (f x))
                                  (matita_basics_lists_list.nil
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  tl))
                            (matita_basics_deqsets.eqb S a b))
                         matita_basics_bool.true) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    b
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S) =>
                     _0 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            x b) =>
                     cic.lift cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f x) matita_basics_bool.true))
                    (matita_basics_logic.rewrite_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             x matita_basics_bool.true))
                       (matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (f b) H)
                    a
                    (matita_basics_logic.proj1
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_deqsets.eqb S a b)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b))
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             a b)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))
                                  a b) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_deqsets.eqb S a b)
                             matita_basics_bool.true))
                       (matita_basics_deqsets.eqb_true S a b) eqab))
                 (eqab :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         (matita_basics_deqsets.eqb S a b)
                         matita_basics_bool.false) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S a
                                   (matita_basics_lists_list.foldr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))))
                                      (x0 :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S) =>
                                       l0 :
                                         cic.Term (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))) =>
                                       matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (_0 :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          (_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            x0 l0)
                                         l0 (f x0))
                                      (matita_basics_lists_list.nil
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      tl))
                                x)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     (matita_basics_lists_listb.memb S a
                                        (matita_basics_lists_list.foldr
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))))
                                           (x0 :
                                              cic.Term (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   S) =>
                                            l0 :
                                              cic.Term (cic.type cic.z)
                                                ((_A :
                                                    cic.Univ (cic.type cic.z) =>
                                                  matita_basics_lists_list.list
                                                    (cic.lift
                                                       (cic.type cic.z)
                                                       (cic.type cic.z) _A))
                                                   (cic.lift (cic.type cic.z)
                                                      (cic.type cic.z)
                                                      ((_xxx :
                                                          cic.Term
                                                            (cic.type
                                                               (cic.s cic.z))
                                                            matita_basics_deqsets.DeqSet =>
                                                        matita_basics_deqsets.carr
                                                          _xxx)
                                                         S))) =>
                                            matita_basics_bool.match_bool
                                              (cic.type cic.z)
                                              (_0 :
                                                 cic.Term (cic.type cic.z)
                                                   matita_basics_bool.bool =>
                                               (_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S)))
                                              (matita_basics_lists_list.cons
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))
                                                 x0 l0)
                                              l0 (f x0))
                                           (matita_basics_lists_list.nil
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S)))
                                           tl))
                                     x)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f a) matita_basics_bool.true)))
                    Hind (matita_basics_deqsets.eqb S a b) eqab)
                 (matita_basics_bool.true_or_false
                    (matita_basics_deqsets.eqb S a b)))
              (f b) H)
           (H :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (f b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S a
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x0 l0)
                                      l0 (f x0))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl))
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x0 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x0 l0)
                                   l0 (f x0))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl)
                             x))
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_lists_listb.memb S a
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   (_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S)))
                                  (matita_basics_lists_list.cons
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     b
                                     (matita_basics_lists_list.foldr
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))))
                                        (x0 :
                                           cic.Term (cic.type cic.z)
                                             ((_xxx :
                                                 cic.Term
                                                   (cic.type (cic.s cic.z))
                                                   matita_basics_deqsets.DeqSet =>
                                               matita_basics_deqsets.carr
                                                 _xxx)
                                                S) =>
                                         l0 :
                                           cic.Term (cic.type cic.z)
                                             ((_A :
                                                 cic.Univ (cic.type cic.z) =>
                                               matita_basics_lists_list.list
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z) _A))
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z)
                                                   ((_xxx :
                                                       cic.Term
                                                         (cic.type
                                                            (cic.s cic.z))
                                                         matita_basics_deqsets.DeqSet =>
                                                     matita_basics_deqsets.carr
                                                       _xxx)
                                                      S))) =>
                                         matita_basics_bool.match_bool
                                           (cic.type cic.z)
                                           (_0 :
                                              cic.Term (cic.type cic.z)
                                                matita_basics_bool.bool =>
                                            (_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S)))
                                           (matita_basics_lists_list.cons
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))
                                              x0 l0)
                                           l0 (f x0))
                                        (matita_basics_lists_list.nil
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S)))
                                        tl))
                                  (matita_basics_lists_list.foldr
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))))
                                     (x0 :
                                        cic.Term (cic.type cic.z)
                                          ((_xxx :
                                              cic.Term
                                                (cic.type (cic.s cic.z))
                                                matita_basics_deqsets.DeqSet =>
                                            matita_basics_deqsets.carr _xxx)
                                             S) =>
                                      l0 :
                                        cic.Term (cic.type cic.z)
                                          ((_A : cic.Univ (cic.type cic.z) =>
                                            matita_basics_lists_list.list
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z) _A))
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z)
                                                ((_xxx :
                                                    cic.Term
                                                      (cic.type (cic.s cic.z))
                                                      matita_basics_deqsets.DeqSet =>
                                                  matita_basics_deqsets.carr
                                                    _xxx)
                                                   S))) =>
                                      matita_basics_bool.match_bool
                                        (cic.type cic.z)
                                        (_0 :
                                           cic.Term (cic.type cic.z)
                                             matita_basics_bool.bool =>
                                         (_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S)))
                                        (matita_basics_lists_list.cons
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))
                                           x0 l0)
                                        l0 (f x0))
                                     (matita_basics_lists_list.nil
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S)))
                                     tl)
                                  x))
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (f a) matita_basics_bool.true)))
              Hind (f b) H)
           (matita_basics_bool.true_or_false (f b)))
        l.

def memb_filter :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  matita_basics_bool.bool))
              (f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S) =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S)))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_xxx :
                        cic.Term (cic.type (cic.s cic.z))
                          matita_basics_deqsets.DeqSet =>
                      matita_basics_deqsets.carr _xxx) S)
                    (x :
                       cic.Term (cic.type cic.z)
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S x
                             (matita_basics_lists_list.filter
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                f l))
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_lists_listb.memb S x
                                  (matita_basics_lists_list.filter
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     f l))
                               matita_basics_bool.true) =>
                        (_A : cic.Univ cic.prop =>
                         _B : cic.Univ cic.prop =>
                         matita_basics_logic.And _A _B)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x l)
                             matita_basics_bool.true)
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (f x) matita_basics_bool.true)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              matita_basics_bool.bool)) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      x :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      auto :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (matita_basics_lists_listb.memb S x
                (matita_basics_lists_list.filter
                   (cic.lift (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S))
                   f l))
             matita_basics_bool.true) =>
      matita_basics_logic.conj
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (matita_basics_lists_listb.memb S x l) matita_basics_bool.true)
        ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
          _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
          matita_basics_logic.eq
            (cic.lift (cic.type (cic.s (cic.s cic.z)))
               (cic.type (cic.s (cic.s cic.z))) A)
            _x __)
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           (f x) matita_basics_bool.true)
        (matita_basics_lists_listb.memb_filter_memb S f x l
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x0 matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S x
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f l))
              auto))
        (matita_basics_lists_listb.filter_true S f x l
           (matita_basics_logic.rewrite_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
                 ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                   _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                   matita_basics_logic.eq
                     (cic.lift (cic.type (cic.s (cic.s cic.z)))
                        (cic.type (cic.s (cic.s cic.z))) A)
                     _x __)
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    x0 matita_basics_bool.true))
              (matita_basics_logic.refl
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true)
              (matita_basics_lists_listb.memb S x
                 (matita_basics_lists_list.filter
                    (cic.lift (cic.type cic.z) (cic.type cic.z)
                       ((_xxx :
                           cic.Term (cic.type (cic.s cic.z))
                             matita_basics_deqsets.DeqSet =>
                         matita_basics_deqsets.carr _xxx) S))
                    f l))
              auto)).

def memb_filter_l :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           matita_basics_deqsets.DeqSet
           (S :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (__ :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  matita_basics_bool.bool))
              (f :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S)
                      (__ :
                         cic.Term (cic.type cic.z)
                           ((_xxx :
                               cic.Term (cic.type (cic.s cic.z))
                                 matita_basics_deqsets.DeqSet =>
                             matita_basics_deqsets.carr _xxx) S) =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S)
                 (x :
                    cic.Term (cic.type cic.z)
                      ((_xxx :
                          cic.Term (cic.type (cic.s cic.z))
                            matita_basics_deqsets.DeqSet =>
                        matita_basics_deqsets.carr _xxx) S) =>
                  cic.prod (cic.type cic.z) cic.prop
                    ((_A : cic.Univ (cic.type cic.z) =>
                      matita_basics_lists_list.list
                        (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S)))
                    (l :
                       cic.Term (cic.type cic.z)
                         ((_A : cic.Univ (cic.type cic.z) =>
                           matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))) =>
                     cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (f x) matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (f x) matita_basics_bool.true) =>
                        cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x l)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb S x l)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x
                                (matita_basics_lists_list.filter
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   f l))
                             matita_basics_bool.true)))))))
      :=
      S : cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
      f :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S)
             (__ :
                cic.Term (cic.type cic.z)
                  ((_xxx :
                      cic.Term (cic.type (cic.s cic.z))
                        matita_basics_deqsets.DeqSet =>
                    matita_basics_deqsets.carr _xxx) S) =>
              matita_basics_bool.bool)) =>
      x :
        cic.Term (cic.type cic.z)
          ((_xxx :
              cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
            matita_basics_deqsets.carr _xxx) S) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z)
                ((_xxx :
                    cic.Term (cic.type (cic.s cic.z))
                      matita_basics_deqsets.DeqSet =>
                  matita_basics_deqsets.carr _xxx) S))) =>
      fx :
        cic.Term cic.prop
          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
            _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
            matita_basics_logic.eq
              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                 (cic.type (cic.s (cic.s cic.z))) A)
              _x __)
             (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                matita_basics_bool.bool)
             (f x) matita_basics_bool.true) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z)
           ((_xxx :
               cic.Term (cic.type (cic.s cic.z)) matita_basics_deqsets.DeqSet =>
             matita_basics_deqsets.carr _xxx) S))
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S x _x_716)
                 matita_basics_bool.true)
              (__ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_lists_listb.memb S x _x_716)
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S x
                    (matita_basics_lists_list.filter
                       (cic.lift (cic.type cic.z) (cic.type cic.z)
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       f _x_716))
                 matita_basics_bool.true)))
        (auto :
           cic.Term cic.prop
             ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
               _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
               matita_basics_logic.eq
                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                    (cic.type (cic.s (cic.s cic.z))) A)
                 _x __)
                (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                   matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
              matita_basics_bool.bool)
           matita_basics_bool.true
           (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
            cic.lift cic.prop (cic.type (cic.s (cic.s cic.z)))
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 x0 matita_basics_bool.true))
           (matita_basics_logic.refl
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.true)
           matita_basics_bool.false auto)
        (b :
           cic.Term (cic.type cic.z)
             ((_xxx :
                 cic.Term (cic.type (cic.s cic.z))
                   matita_basics_deqsets.DeqSet =>
               matita_basics_deqsets.carr _xxx) S) =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S))) =>
         Hind :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x tl)
                   matita_basics_bool.true)
                (__ :
                   cic.Term cic.prop
                     ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                       _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                       matita_basics_logic.eq
                         (cic.lift (cic.type (cic.s (cic.s cic.z)))
                            (cic.type (cic.s (cic.s cic.z))) A)
                         _x __)
                        (cic.lift (cic.type cic.z)
                           (cic.type (cic.s (cic.s cic.z)))
                           matita_basics_bool.bool)
                        (matita_basics_lists_listb.memb S x tl)
                        matita_basics_bool.true) =>
                 (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __1)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_lists_listb.memb S x
                      (matita_basics_lists_list.foldr
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_xxx :
                                cic.Term (cic.type (cic.s cic.z))
                                  matita_basics_deqsets.DeqSet =>
                              matita_basics_deqsets.carr _xxx) S))
                         (cic.lift (cic.type cic.z) (cic.type cic.z)
                            ((_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))))
                         (x0 :
                            cic.Term (cic.type cic.z)
                              ((_xxx :
                                  cic.Term (cic.type (cic.s cic.z))
                                    matita_basics_deqsets.DeqSet =>
                                matita_basics_deqsets.carr _xxx) S) =>
                          l0 :
                            cic.Term (cic.type cic.z)
                              ((_A : cic.Univ (cic.type cic.z) =>
                                matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     _A))
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    ((_xxx :
                                        cic.Term (cic.type (cic.s cic.z))
                                          matita_basics_deqsets.DeqSet =>
                                      matita_basics_deqsets.carr _xxx) S))) =>
                          matita_basics_bool.match_bool (cic.type cic.z)
                            (_0 :
                               cic.Term (cic.type cic.z)
                                 matita_basics_bool.bool =>
                             (_A : cic.Univ (cic.type cic.z) =>
                              matita_basics_lists_list.list
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   _A))
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S)))
                            (matita_basics_lists_list.cons
                               (cic.lift (cic.type cic.z) (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               x0 l0)
                            l0 (f x0))
                         (matita_basics_lists_list.nil
                            (cic.lift (cic.type cic.z) (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S)))
                         tl))
                   matita_basics_bool.true)) =>
         matita_basics_logic.match_Or cic.prop
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S x b) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              (matita_basics_deqsets.eqb S x b) matita_basics_bool.false)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S x b)
                      matita_basics_bool.true)
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_deqsets.eqb S x b)
                      matita_basics_bool.false)) =>
            cic.prod cic.prop cic.prop
              ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __1)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_bool.match_bool (cic.type cic.z)
                    (_0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     matita_basics_bool.bool)
                    matita_basics_bool.true
                    (matita_basics_lists_listb.memb S x tl)
                    (matita_basics_deqsets.eqb S x b))
                 matita_basics_bool.true)
              (__1 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __1)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      (matita_basics_bool.match_bool (cic.type cic.z)
                         (_0 :
                            cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                          matita_basics_bool.bool)
                         matita_basics_bool.true
                         (matita_basics_lists_listb.memb S x tl)
                         (matita_basics_deqsets.eqb S x b))
                      matita_basics_bool.true) =>
               (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                matita_basics_logic.eq
                  (cic.lift (cic.type (cic.s (cic.s cic.z)))
                     (cic.type (cic.s (cic.s cic.z))) A)
                  _x __2)
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 (matita_basics_lists_listb.memb S x
                    (matita_basics_bool.match_bool (cic.type cic.z)
                       (_0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        (_A : cic.Univ (cic.type cic.z) =>
                         matita_basics_lists_list.list
                           (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S)))
                       (matita_basics_lists_list.cons
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          b
                          (matita_basics_lists_list.foldr
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))))
                             (x0 :
                                cic.Term (cic.type cic.z)
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S) =>
                              l0 :
                                cic.Term (cic.type cic.z)
                                  ((_A : cic.Univ (cic.type cic.z) =>
                                    matita_basics_lists_list.list
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z) _A))
                                     (cic.lift (cic.type cic.z)
                                        (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))) =>
                              matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   x0 l0)
                                l0 (f x0))
                             (matita_basics_lists_list.nil
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             tl))
                       (matita_basics_lists_list.foldr
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          (cic.lift (cic.type cic.z) (cic.type cic.z)
                             ((_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))))
                          (x0 :
                             cic.Term (cic.type cic.z)
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S) =>
                           l0 :
                             cic.Term (cic.type cic.z)
                               ((_A : cic.Univ (cic.type cic.z) =>
                                 matita_basics_lists_list.list
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z) _A))
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S))) =>
                           matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x0 l0)
                             l0 (f x0))
                          (matita_basics_lists_list.nil
                             (cic.lift (cic.type cic.z) (cic.type cic.z)
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S)))
                          tl)
                       (f b)))
                 matita_basics_bool.true))
           (eqxb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S x b) matita_basics_bool.true) =>
            matita_basics_logic.eq_ind
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 ((_xxx :
                     cic.Term (cic.type (cic.s cic.z))
                       matita_basics_deqsets.DeqSet =>
                   matita_basics_deqsets.carr _xxx) S))
              x
              (x_1 :
                 cic.Term (cic.type cic.z)
                   ((_xxx :
                       cic.Term (cic.type (cic.s cic.z))
                         matita_basics_deqsets.DeqSet =>
                     matita_basics_deqsets.carr _xxx) S) =>
               _x_2 :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         ((_xxx :
                             cic.Term (cic.type (cic.s cic.z))
                               matita_basics_deqsets.DeqSet =>
                           matita_basics_deqsets.carr _xxx) S))
                      x x_1) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S x tl)
                          (matita_basics_deqsets.eqb S x x_1))
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S x tl)
                               (matita_basics_deqsets.eqb S x x_1))
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S x
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x_1
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x0 l0)
                                      l0 (f x0))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl))
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x0 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x0 l0)
                                   l0 (f x0))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl)
                             (f x_1)))
                       matita_basics_bool.true)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                    matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                        _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                        matita_basics_logic.eq
                          (cic.lift (cic.type (cic.s (cic.s cic.z)))
                             (cic.type (cic.s (cic.s cic.z))) A)
                          _x __)
                         (cic.lift (cic.type cic.z)
                            (cic.type (cic.s (cic.s cic.z)))
                            matita_basics_bool.bool)
                         x0 matita_basics_bool.true) =>
                  cic.lift cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              matita_basics_bool.bool)
                             matita_basics_bool.true
                             (matita_basics_lists_listb.memb S x tl) x0)
                          matita_basics_bool.true)
                       (__1 :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __1 :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __1)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_bool.match_bool
                                  (cic.type cic.z)
                                  (_0 :
                                     cic.Term (cic.type cic.z)
                                       matita_basics_bool.bool =>
                                   matita_basics_bool.bool)
                                  matita_basics_bool.true
                                  (matita_basics_lists_listb.memb S x tl) x0)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __2)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_lists_listb.memb S x
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 (_A : cic.Univ (cic.type cic.z) =>
                                  matita_basics_lists_list.list
                                    (cic.lift (cic.type cic.z)
                                       (cic.type cic.z) _A))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                (matita_basics_lists_list.cons
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   x
                                   (matita_basics_lists_list.foldr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))))
                                      (x00 :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S) =>
                                       l0 :
                                         cic.Term (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))) =>
                                       matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (_0 :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          (_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            x00 l0)
                                         l0 (f x00))
                                      (matita_basics_lists_list.nil
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      tl))
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x00 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x00 l0)
                                      l0 (f x00))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl)
                                (f x)))
                          matita_basics_bool.true)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x0 matita_basics_bool.true) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S x tl)
                                matita_basics_bool.true)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_bool.match_bool
                                     (cic.type cic.z)
                                     (_0 :
                                        cic.Term (cic.type cic.z)
                                          matita_basics_bool.bool =>
                                      matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     (matita_basics_lists_listb.memb S x tl)
                                     matita_basics_bool.true)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x
                                (matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x
                                      (matita_basics_lists_list.foldr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_lists_list.list
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))))
                                         (x00 :
                                            cic.Term (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S) =>
                                          l0 :
                                            cic.Term (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))) =>
                                          matita_basics_bool.match_bool
                                            (cic.type cic.z)
                                            (_0 :
                                               cic.Term (cic.type cic.z)
                                                 matita_basics_bool.bool =>
                                             (_A :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_lists_list.list
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S)))
                                            (matita_basics_lists_list.cons
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               x00 l0)
                                            l0 (f x00))
                                         (matita_basics_lists_list.nil
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         tl))
                                   (matita_basics_lists_list.foldr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))))
                                      (x00 :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S) =>
                                       l0 :
                                         cic.Term (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))) =>
                                       matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (_0 :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          (_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            x00 l0)
                                         l0 (f x00))
                                      (matita_basics_lists_list.nil
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      tl)
                                   x0))
                             matita_basics_bool.true)))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       matita_basics_bool.true
                       (x0 :
                          cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               x0 matita_basics_bool.true) =>
                        cic.lift cic.prop cic.prop
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                matita_basics_bool.true)
                             (__1 :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __1 :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __1)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     matita_basics_bool.true
                                     matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __2 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __2)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    matita_basics_bool.bool)
                                   matita_basics_bool.true
                                   (matita_basics_lists_listb.memb S x
                                      (matita_basics_lists_list.foldr
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_A :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_lists_list.list
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))))
                                         (x00 :
                                            cic.Term (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S) =>
                                          l0 :
                                            cic.Term (cic.type cic.z)
                                              ((_A :
                                                  cic.Univ (cic.type cic.z) =>
                                                matita_basics_lists_list.list
                                                  (cic.lift (cic.type cic.z)
                                                     (cic.type cic.z) _A))
                                                 (cic.lift (cic.type cic.z)
                                                    (cic.type cic.z)
                                                    ((_xxx :
                                                        cic.Term
                                                          (cic.type
                                                             (cic.s cic.z))
                                                          matita_basics_deqsets.DeqSet =>
                                                      matita_basics_deqsets.carr
                                                        _xxx)
                                                       S))) =>
                                          matita_basics_bool.match_bool
                                            (cic.type cic.z)
                                            (_0 :
                                               cic.Term (cic.type cic.z)
                                                 matita_basics_bool.bool =>
                                             (_A :
                                                cic.Univ (cic.type cic.z) =>
                                              matita_basics_lists_list.list
                                                (cic.lift (cic.type cic.z)
                                                   (cic.type cic.z) _A))
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S)))
                                            (matita_basics_lists_list.cons
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z)
                                                  ((_xxx :
                                                      cic.Term
                                                        (cic.type
                                                           (cic.s cic.z))
                                                        matita_basics_deqsets.DeqSet =>
                                                    matita_basics_deqsets.carr
                                                      _xxx)
                                                     S))
                                               x00 l0)
                                            l0 (f x00))
                                         (matita_basics_lists_list.nil
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         tl))
                                   x0)
                                matita_basics_bool.true)))
                       (auto :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               matita_basics_bool.true
                               matita_basics_bool.true) =>
                        matita_basics_logic.refl
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          matita_basics_bool.true)
                       (matita_basics_deqsets.eqb S x x)
                       (matita_basics_logic.proj2
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb S x x)
                                matita_basics_bool.true)
                             (__ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        matita_basics_bool.bool)
                                     (matita_basics_deqsets.eqb S x x)
                                     matita_basics_bool.true) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x x))
                          (cic.prod cic.prop cic.prop
                             ((A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __ :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                x x)
                             (__ :
                                cic.Term cic.prop
                                  ((A :
                                      cic.Univ
                                        (cic.type (cic.s (cic.s cic.z))) =>
                                    _x :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    __ :
                                      cic.Term
                                        (cic.type (cic.s (cic.s cic.z))) A =>
                                    matita_basics_logic.eq
                                      (cic.lift
                                         (cic.type (cic.s (cic.s cic.z)))
                                         (cic.type (cic.s (cic.s cic.z))) A)
                                      _x __)
                                     (cic.lift (cic.type cic.z)
                                        (cic.type (cic.s (cic.s cic.z)))
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S))
                                     x x) =>
                              (A :
                                 cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                               _x :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               __1 :
                                 cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                    (cic.type (cic.s (cic.s cic.z))) A)
                                 _x __1)
                                (cic.lift (cic.type cic.z)
                                   (cic.type (cic.s (cic.s cic.z)))
                                   matita_basics_bool.bool)
                                (matita_basics_deqsets.eqb S x x)
                                matita_basics_bool.true))
                          (matita_basics_deqsets.eqb_true S x x)
                          (matita_basics_logic.refl
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                ((_xxx :
                                    cic.Term (cic.type (cic.s cic.z))
                                      matita_basics_deqsets.DeqSet =>
                                  matita_basics_deqsets.carr _xxx) S))
                             x)))
                    (f x) fx)
                 (matita_basics_deqsets.eqb S x x)
                 (matita_basics_logic.proj2
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S x x)
                          matita_basics_bool.true)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  matita_basics_bool.bool)
                               (matita_basics_deqsets.eqb S x x)
                               matita_basics_bool.true) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          x x))
                    (cic.prod cic.prop cic.prop
                       ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             ((_xxx :
                                 cic.Term (cic.type (cic.s cic.z))
                                   matita_basics_deqsets.DeqSet =>
                               matita_basics_deqsets.carr _xxx) S))
                          x x)
                       (__ :
                          cic.Term cic.prop
                            ((A :
                                cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                              _x :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              __ :
                                cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                              matita_basics_logic.eq
                                (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                   (cic.type (cic.s (cic.s cic.z))) A)
                                _x __)
                               (cic.lift (cic.type cic.z)
                                  (cic.type (cic.s (cic.s cic.z)))
                                  ((_xxx :
                                      cic.Term (cic.type (cic.s cic.z))
                                        matita_basics_deqsets.DeqSet =>
                                    matita_basics_deqsets.carr _xxx) S))
                               x x) =>
                        (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                         _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                         matita_basics_logic.eq
                           (cic.lift (cic.type (cic.s (cic.s cic.z)))
                              (cic.type (cic.s (cic.s cic.z))) A)
                           _x __1)
                          (cic.lift (cic.type cic.z)
                             (cic.type (cic.s (cic.s cic.z)))
                             matita_basics_bool.bool)
                          (matita_basics_deqsets.eqb S x x)
                          matita_basics_bool.true))
                    (matita_basics_deqsets.eqb_true S x x)
                    (matita_basics_logic.refl
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       x)))
              b
              (matita_basics_logic.proj1
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S x b)
                       matita_basics_bool.true)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_deqsets.eqb S x b)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       x b))
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          ((_xxx :
                              cic.Term (cic.type (cic.s cic.z))
                                matita_basics_deqsets.DeqSet =>
                            matita_basics_deqsets.carr _xxx) S))
                       x b)
                    (__ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               ((_xxx :
                                   cic.Term (cic.type (cic.s cic.z))
                                     matita_basics_deqsets.DeqSet =>
                                 matita_basics_deqsets.carr _xxx) S))
                            x b) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_deqsets.eqb S x b)
                       matita_basics_bool.true))
                 (matita_basics_deqsets.eqb_true S x b) eqxb))
           (eqxb :
              cic.Term cic.prop
                ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                  _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                  matita_basics_logic.eq
                    (cic.lift (cic.type (cic.s (cic.s cic.z)))
                       (cic.type (cic.s (cic.s cic.z))) A)
                    _x __)
                   (cic.lift (cic.type cic.z)
                      (cic.type (cic.s (cic.s cic.z)))
                      matita_basics_bool.bool)
                   (matita_basics_deqsets.eqb S x b) matita_basics_bool.false) =>
            matita_basics_logic.eq_ind_r
              (cic.lift (cic.type cic.z) (cic.type (cic.s (cic.s cic.z)))
                 matita_basics_bool.bool)
              matita_basics_bool.false
              (x0 : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                     _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     __ : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                     matita_basics_logic.eq
                       (cic.lift (cic.type (cic.s (cic.s cic.z)))
                          (cic.type (cic.s (cic.s cic.z))) A)
                       _x __)
                      (cic.lift (cic.type cic.z)
                         (cic.type (cic.s (cic.s cic.z)))
                         matita_basics_bool.bool)
                      x0 matita_basics_bool.false) =>
               cic.lift cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S x tl) x0)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S x tl) x0)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S x
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x00 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x00 l0)
                                      l0 (f x00))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl))
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x00 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x00 l0)
                                   l0 (f x00))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl)
                             (f b)))
                       matita_basics_bool.true)))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                  cic.prod cic.prop cic.prop
                    ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __1 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __1)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_bool.match_bool (cic.type cic.z)
                          (_0 :
                             cic.Term (cic.type cic.z)
                               matita_basics_bool.bool =>
                           matita_basics_bool.bool)
                          matita_basics_bool.true
                          (matita_basics_lists_listb.memb S x tl)
                          matita_basics_bool.false)
                       matita_basics_bool.true)
                    (__1 :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __1 :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __1)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            (matita_basics_bool.match_bool (cic.type cic.z)
                               (_0 :
                                  cic.Term (cic.type cic.z)
                                    matita_basics_bool.bool =>
                                matita_basics_bool.bool)
                               matita_basics_bool.true
                               (matita_basics_lists_listb.memb S x tl)
                               matita_basics_bool.false)
                            matita_basics_bool.true) =>
                     (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                      _x : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      __2 : cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                      matita_basics_logic.eq
                        (cic.lift (cic.type (cic.s (cic.s cic.z)))
                           (cic.type (cic.s (cic.s cic.z))) A)
                        _x __2)
                       (cic.lift (cic.type cic.z)
                          (cic.type (cic.s (cic.s cic.z)))
                          matita_basics_bool.bool)
                       (matita_basics_lists_listb.memb S x
                          (matita_basics_bool.match_bool (cic.type cic.z)
                             (_0 :
                                cic.Term (cic.type cic.z)
                                  matita_basics_bool.bool =>
                              (_A : cic.Univ (cic.type cic.z) =>
                               matita_basics_lists_list.list
                                 (cic.lift (cic.type cic.z) (cic.type cic.z)
                                    _A))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S)))
                             (matita_basics_lists_list.cons
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                b
                                (matita_basics_lists_list.foldr
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S))
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))))
                                   (x0 :
                                      cic.Term (cic.type cic.z)
                                        ((_xxx :
                                            cic.Term (cic.type (cic.s cic.z))
                                              matita_basics_deqsets.DeqSet =>
                                          matita_basics_deqsets.carr _xxx) S) =>
                                    l0 :
                                      cic.Term (cic.type cic.z)
                                        ((_A : cic.Univ (cic.type cic.z) =>
                                          matita_basics_lists_list.list
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z) _A))
                                           (cic.lift (cic.type cic.z)
                                              (cic.type cic.z)
                                              ((_xxx :
                                                  cic.Term
                                                    (cic.type (cic.s cic.z))
                                                    matita_basics_deqsets.DeqSet =>
                                                matita_basics_deqsets.carr
                                                  _xxx)
                                                 S))) =>
                                    matita_basics_bool.match_bool
                                      (cic.type cic.z)
                                      (_0 :
                                         cic.Term (cic.type cic.z)
                                           matita_basics_bool.bool =>
                                       (_A : cic.Univ (cic.type cic.z) =>
                                        matita_basics_lists_list.list
                                          (cic.lift (cic.type cic.z)
                                             (cic.type cic.z) _A))
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      (matita_basics_lists_list.cons
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S))
                                         x0 l0)
                                      l0 (f x0))
                                   (matita_basics_lists_list.nil
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   tl))
                             (matita_basics_lists_list.foldr
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_xxx :
                                       cic.Term (cic.type (cic.s cic.z))
                                         matita_basics_deqsets.DeqSet =>
                                     matita_basics_deqsets.carr _xxx) S))
                                (cic.lift (cic.type cic.z) (cic.type cic.z)
                                   ((_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))))
                                (x0 :
                                   cic.Term (cic.type cic.z)
                                     ((_xxx :
                                         cic.Term (cic.type (cic.s cic.z))
                                           matita_basics_deqsets.DeqSet =>
                                       matita_basics_deqsets.carr _xxx) S) =>
                                 l0 :
                                   cic.Term (cic.type cic.z)
                                     ((_A : cic.Univ (cic.type cic.z) =>
                                       matita_basics_lists_list.list
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z) _A))
                                        (cic.lift (cic.type cic.z)
                                           (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S))) =>
                                 matita_basics_bool.match_bool
                                   (cic.type cic.z)
                                   (_0 :
                                      cic.Term (cic.type cic.z)
                                        matita_basics_bool.bool =>
                                    (_A : cic.Univ (cic.type cic.z) =>
                                     matita_basics_lists_list.list
                                       (cic.lift (cic.type cic.z)
                                          (cic.type cic.z) _A))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S)))
                                   (matita_basics_lists_list.cons
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      x0 l0)
                                   l0 (f x0))
                                (matita_basics_lists_list.nil
                                   (cic.lift (cic.type cic.z)
                                      (cic.type cic.z)
                                      ((_xxx :
                                          cic.Term (cic.type (cic.s cic.z))
                                            matita_basics_deqsets.DeqSet =>
                                        matita_basics_deqsets.carr _xxx) S)))
                                tl)
                             __))
                       matita_basics_bool.true))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift (cic.type cic.z)
                       (cic.type (cic.s (cic.s cic.z)))
                       matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x0 :
                       cic.Term (cic.type cic.z) matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                           _x :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           __ :
                             cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                           matita_basics_logic.eq
                             (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                (cic.type (cic.s (cic.s cic.z))) A)
                             _x __)
                            (cic.lift (cic.type cic.z)
                               (cic.type (cic.s (cic.s cic.z)))
                               matita_basics_bool.bool)
                            x0 matita_basics_bool.false) =>
                     cic.lift cic.prop cic.prop
                       (cic.prod cic.prop cic.prop
                          ((A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __1 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __1)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_lists_listb.memb S x tl)
                             matita_basics_bool.true)
                          (__1 :
                             cic.Term cic.prop
                               ((A :
                                   cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                                 _x :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 __1 :
                                   cic.Term (cic.type (cic.s (cic.s cic.z)))
                                     A =>
                                 matita_basics_logic.eq
                                   (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                      (cic.type (cic.s (cic.s cic.z))) A)
                                   _x __1)
                                  (cic.lift (cic.type cic.z)
                                     (cic.type (cic.s (cic.s cic.z)))
                                     matita_basics_bool.bool)
                                  (matita_basics_lists_listb.memb S x tl)
                                  matita_basics_bool.true) =>
                           (A : cic.Univ (cic.type (cic.s (cic.s cic.z))) =>
                            _x :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            __2 :
                              cic.Term (cic.type (cic.s (cic.s cic.z))) A =>
                            matita_basics_logic.eq
                              (cic.lift (cic.type (cic.s (cic.s cic.z)))
                                 (cic.type (cic.s (cic.s cic.z))) A)
                              _x __2)
                             (cic.lift (cic.type cic.z)
                                (cic.type (cic.s (cic.s cic.z)))
                                matita_basics_bool.bool)
                             (matita_basics_bool.match_bool (cic.type cic.z)
                                (_0 :
                                   cic.Term (cic.type cic.z)
                                     matita_basics_bool.bool =>
                                 matita_basics_bool.bool)
                                matita_basics_bool.true
                                (matita_basics_lists_listb.memb S x
                                   (matita_basics_lists_list.foldr
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_xxx :
                                             cic.Term
                                               (cic.type (cic.s cic.z))
                                               matita_basics_deqsets.DeqSet =>
                                           matita_basics_deqsets.carr _xxx) S))
                                      (cic.lift (cic.type cic.z)
                                         (cic.type cic.z)
                                         ((_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))))
                                      (x00 :
                                         cic.Term (cic.type cic.z)
                                           ((_xxx :
                                               cic.Term
                                                 (cic.type (cic.s cic.z))
                                                 matita_basics_deqsets.DeqSet =>
                                             matita_basics_deqsets.carr _xxx)
                                              S) =>
                                       l0 :
                                         cic.Term (cic.type cic.z)
                                           ((_A :
                                               cic.Univ (cic.type cic.z) =>
                                             matita_basics_lists_list.list
                                               (cic.lift (cic.type cic.z)
                                                  (cic.type cic.z) _A))
                                              (cic.lift (cic.type cic.z)
                                                 (cic.type cic.z)
                                                 ((_xxx :
                                                     cic.Term
                                                       (cic.type
                                                          (cic.s cic.z))
                                                       matita_basics_deqsets.DeqSet =>
                                                   matita_basics_deqsets.carr
                                                     _xxx)
                                                    S))) =>
                                       matita_basics_bool.match_bool
                                         (cic.type cic.z)
                                         (_0 :
                                            cic.Term (cic.type cic.z)
                                              matita_basics_bool.bool =>
                                          (_A : cic.Univ (cic.type cic.z) =>
                                           matita_basics_lists_list.list
                                             (cic.lift (cic.type cic.z)
                                                (cic.type cic.z) _A))
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S)))
                                         (matita_basics_lists_list.cons
                                            (cic.lift (cic.type cic.z)
                                               (cic.type cic.z)
                                               ((_xxx :
                                                   cic.Term
                                                     (cic.type (cic.s cic.z))
                                                     matita_basics_deqsets.DeqSet =>
                                                 matita_basics_deqsets.carr
                                                   _xxx)
                                                  S))
                                            x00 l0)
                                         l0 (f x00))
                                      (matita_basics_lists_list.nil
                                         (cic.lift (cic.type cic.z)
                                            (cic.type cic.z)
                                            ((_xxx :
                                                cic.Term
                                                  (cic.type (cic.s cic.z))
                                                  matita_basics_deqsets.DeqSet =>
                                              matita_basics_deqsets.carr _xxx)
                                               S)))
                                      tl))
                                x0)
                             matita_basics_bool.true)))
                    Hind (matita_basics_deqsets.eqb S x b) eqxb)
                 Hind (f b))
              (matita_basics_deqsets.eqb S x b) eqxb)
           (matita_basics_bool.true_or_false
              (matita_basics_deqsets.eqb S x b)))
        l.

def exists :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) A
                 (__ : cic.Term (cic.type cic.z) A => matita_basics_bool.bool))
              (_p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A))
                 (_l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
                  matita_basics_bool.bool)))).

def exists_body :
      cic.Term (cic.type (cic.s cic.z))
        (cic.prod (cic.type (cic.s cic.z)) (cic.type cic.z)
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) (cic.type cic.z)
              (cic.prod (cic.type cic.z) (cic.type cic.z) A
                 (__ : cic.Term (cic.type cic.z) A => matita_basics_bool.bool))
              (_p :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A =>
                       matita_basics_bool.bool)) =>
               cic.prod (cic.type cic.z) (cic.type cic.z)
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A))
                 (_l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
                  matita_basics_bool.bool)))).

[ A, _p, _l ] exists A _p _l -->
  matita_basics_lists_list.filter_list (cic.type cic.z) A
    (_l :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.bool)
    (matita_basics_lists_listb.exists_body
       (cic.lift (cic.type cic.z) (cic.type cic.z) A) _p)
    _l.

[ A, _p, _l ] exists_body A _p _l -->
  matita_basics_lists_list.match_list (cic.type cic.z)
    (cic.lift (cic.type cic.z) (cic.type cic.z) A)
    (__ :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.bool)
    matita_basics_bool.false
    (h : cic.Term (cic.type cic.z) A =>
     t :
       cic.Term (cic.type cic.z)
         ((_A : cic.Univ (cic.type cic.z) =>
           matita_basics_lists_list.list
             (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
            (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
     matita_basics_bool.orb (_p h)
       (matita_basics_lists_listb.exists
          (cic.lift (cic.type cic.z) (cic.type cic.z) A) _p t))
    _l.

def Exists_exists :
      cic.Term cic.prop
        (cic.prod (cic.type (cic.s cic.z)) cic.prop
           (cic.univ (cic.type cic.z))
           (A : cic.Univ (cic.type cic.z) =>
            cic.prod (cic.type cic.z) cic.prop
              (cic.prod (cic.type cic.z) (cic.type cic.z) A
                 (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop))
              (P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A
                      (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
               cic.prod (cic.type cic.z) cic.prop
                 ((_A : cic.Univ (cic.type cic.z) =>
                   matita_basics_lists_list.list
                     (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A))
                 (l :
                    cic.Term (cic.type cic.z)
                      ((_A : cic.Univ (cic.type cic.z) =>
                        matita_basics_lists_list.list
                          (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                         (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
                  cic.prod cic.prop cic.prop
                    ((A1 : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                             (__ : cic.Term (cic.type cic.z) A1 =>
                              cic.univ cic.prop)) =>
                      _l :
                        cic.Term (cic.type cic.z)
                          (matita_basics_lists_list.list
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                      matita_basics_lists_list.Exists
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                       (__ : cic.Term (cic.type cic.z) A =>
                        cic.lift cic.prop cic.prop (P __))
                       l)
                    (__ :
                       cic.Term cic.prop
                         ((A1 : cic.Univ (cic.type cic.z) =>
                           _P :
                             cic.Term (cic.type cic.z)
                               (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                                  (__ : cic.Term (cic.type cic.z) A1 =>
                                   cic.univ cic.prop)) =>
                           _l :
                             cic.Term (cic.type cic.z)
                               (matita_basics_lists_list.list
                                  (cic.lift (cic.type cic.z) (cic.type cic.z)
                                     A1)) =>
                           matita_basics_lists_list.Exists
                             (cic.lift (cic.type cic.z) (cic.type cic.z) A1)
                             _P _l)
                            (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                            (__ : cic.Term (cic.type cic.z) A =>
                             cic.lift cic.prop cic.prop (P __))
                            l) =>
                     (A1 : cic.Univ (cic.type cic.z) =>
                      _P :
                        cic.Term (cic.type cic.z)
                          (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                             (__1 : cic.Term (cic.type cic.z) A1 =>
                              cic.univ cic.prop)) =>
                      matita_basics_logic.ex
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                       (x : cic.Term (cic.type cic.z) A =>
                        cic.lift cic.prop cic.prop
                          ((__1 : cic.Term (cic.type cic.z) A => P __1) x)))))))
      :=
      A : cic.Univ (cic.type cic.z) =>
      P :
        cic.Term (cic.type cic.z)
          (cic.prod (cic.type cic.z) (cic.type cic.z) A
             (__ : cic.Term (cic.type cic.z) A => cic.univ cic.prop)) =>
      l :
        cic.Term (cic.type cic.z)
          ((_A : cic.Univ (cic.type cic.z) =>
            matita_basics_lists_list.list
              (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
             (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
      matita_basics_lists_list.list_ind
        (cic.lift (cic.type cic.z) (cic.type cic.z) A)
        (_x_716 :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
         cic.lift cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              ((A1 : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                       (__ : cic.Term (cic.type cic.z) A1 =>
                        cic.univ cic.prop)) =>
                _l :
                  cic.Term (cic.type cic.z)
                    (matita_basics_lists_list.list
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                matita_basics_lists_list.Exists
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                 (__ : cic.Term (cic.type cic.z) A =>
                  cic.lift cic.prop cic.prop (P __))
                 _x_716)
              (__ :
                 cic.Term cic.prop
                   ((A1 : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                            (__ : cic.Term (cic.type cic.z) A1 =>
                             cic.univ cic.prop)) =>
                     _l :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                     matita_basics_lists_list.Exists
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.lift cic.prop cic.prop (P __))
                      _x_716) =>
               (A1 : cic.Univ (cic.type cic.z) =>
                _P :
                  cic.Term (cic.type cic.z)
                    (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                       (__1 : cic.Term (cic.type cic.z) A1 =>
                        cic.univ cic.prop)) =>
                matita_basics_logic.ex
                  (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                 (x : cic.Term (cic.type cic.z) A =>
                  cic.lift cic.prop cic.prop
                    ((__1 : cic.Term (cic.type cic.z) A => P __1) x)))))
        (_clearme :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                      (__ : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
               _l :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
               matita_basics_lists_list.Exists
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                (__ : cic.Term (cic.type cic.z) A =>
                 cic.lift cic.prop cic.prop (P __))
                (matita_basics_lists_list.nil
                   (cic.lift (cic.type cic.z) (cic.type cic.z) A))) =>
         matita_basics_logic.match_False cic.prop
           (__ : cic.Term cic.prop matita_basics_logic.False =>
            (A1 : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                    (__1 : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
              (x : cic.Term (cic.type cic.z) A =>
               cic.lift cic.prop cic.prop
                 ((__1 : cic.Term (cic.type cic.z) A => P __1) x)))
           _clearme)
        (hd : cic.Term (cic.type cic.z) A =>
         tl :
           cic.Term (cic.type cic.z)
             ((_A : cic.Univ (cic.type cic.z) =>
               matita_basics_lists_list.list
                 (cic.lift (cic.type cic.z) (cic.type cic.z) _A))
                (cic.lift (cic.type cic.z) (cic.type cic.z) A)) =>
         IH :
           cic.Term cic.prop
             (cic.prod cic.prop cic.prop
                ((A1 : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                         (__ : cic.Term (cic.type cic.z) A1 =>
                          cic.univ cic.prop)) =>
                  _l :
                    cic.Term (cic.type cic.z)
                      (matita_basics_lists_list.list
                         (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                  matita_basics_lists_list.Exists
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                   (__ : cic.Term (cic.type cic.z) A =>
                    cic.lift cic.prop cic.prop (P __))
                   tl)
                (__ :
                   cic.Term cic.prop
                     ((A1 : cic.Univ (cic.type cic.z) =>
                       _P :
                         cic.Term (cic.type cic.z)
                           (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                              (__ : cic.Term (cic.type cic.z) A1 =>
                               cic.univ cic.prop)) =>
                       _l :
                         cic.Term (cic.type cic.z)
                           (matita_basics_lists_list.list
                              (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                       matita_basics_lists_list.Exists
                         (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P
                         _l)
                        (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                        (__ : cic.Term (cic.type cic.z) A =>
                         cic.lift cic.prop cic.prop (P __))
                        tl) =>
                 (A1 : cic.Univ (cic.type cic.z) =>
                  _P :
                    cic.Term (cic.type cic.z)
                      (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                         (__1 : cic.Term (cic.type cic.z) A1 =>
                          cic.univ cic.prop)) =>
                  matita_basics_logic.ex
                    (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
                   (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                   (x : cic.Term (cic.type cic.z) A =>
                    cic.lift cic.prop cic.prop
                      ((__1 : cic.Term (cic.type cic.z) A => P __1) x)))) =>
         _clearme :
           cic.Term cic.prop
             ((A1 : cic.Univ (cic.type cic.z) =>
               _P :
                 cic.Term (cic.type cic.z)
                   (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                      (__ : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
               _l :
                 cic.Term (cic.type cic.z)
                   (matita_basics_lists_list.list
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
               matita_basics_lists_list.Exists
                 (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                (__ : cic.Term (cic.type cic.z) A =>
                 cic.lift cic.prop cic.prop (P __))
                (matita_basics_lists_list.cons
                   (cic.lift (cic.type cic.z) (cic.type cic.z) A) hd tl)) =>
         matita_basics_logic.match_Or cic.prop (P hd)
           (matita_basics_lists_list.Exists
              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
              (__ : cic.Term (cic.type cic.z) A =>
               cic.lift cic.prop cic.prop (P __))
              tl)
           (__ :
              cic.Term cic.prop
                ((_A : cic.Univ cic.prop =>
                  _B : cic.Univ cic.prop => matita_basics_logic.Or _A _B)
                   ((__ : cic.Term (cic.type cic.z) A => P __) hd)
                   ((A1 : cic.Univ (cic.type cic.z) =>
                     _P :
                       cic.Term (cic.type cic.z)
                         (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                            (__ : cic.Term (cic.type cic.z) A1 =>
                             cic.univ cic.prop)) =>
                     _l :
                       cic.Term (cic.type cic.z)
                         (matita_basics_lists_list.list
                            (cic.lift (cic.type cic.z) (cic.type cic.z) A1)) =>
                     matita_basics_lists_list.Exists
                       (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P _l)
                      (cic.lift (cic.type cic.z) (cic.type cic.z) A)
                      (__ : cic.Term (cic.type cic.z) A =>
                       cic.lift cic.prop cic.prop (P __))
                      tl)) =>
            (A1 : cic.Univ (cic.type cic.z) =>
             _P :
               cic.Term (cic.type cic.z)
                 (cic.prod (cic.type cic.z) (cic.type cic.z) A1
                    (__1 : cic.Term (cic.type cic.z) A1 => cic.univ cic.prop)) =>
             matita_basics_logic.ex
               (cic.lift (cic.type cic.z) (cic.type cic.z) A1) _P)
              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
              (x : cic.Term (cic.type cic.z) A =>
               cic.lift cic.prop cic.prop
                 ((__1 : cic.Term (cic.type cic.z) A => P __1) x)))
           (H :
              cic.Term cic.prop
                ((__ : cic.Term (cic.type cic.z) A => P __) hd) =>
            matita_basics_logic.ex_intro
              (cic.lift (cic.type cic.z) (cic.type cic.z) A)
              (x : cic.Term (cic.type cic.z) A =>
               cic.lift cic.prop cic.prop
                 ((__ : cic.Term (cic.type cic.z) A => P __) x))
              hd H)
           IH _clearme)
        l.


